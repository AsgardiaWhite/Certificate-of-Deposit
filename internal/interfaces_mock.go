// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_contractapi is a generated GoMock package.
package contractapi

import (
	gomock "github.com/golang/mock/gomock"
	"reflect"
)

// MockContract is a mock of Contract interface.
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
}

// MockContractMockRecorder is the mock recorder for MockContract.
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance.
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockContract) Init(stub ContractStub) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", stub)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockContractMockRecorder) Init(stub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockContract)(nil).Init), stub)
}

// Invoke mocks base method.
func (m *MockContract) Invoke(stub ContractStub) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", stub)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockContractMockRecorder) Invoke(stub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockContract)(nil).Invoke), stub)
}

// MockStub is a mock of Stub interface.
type MockStub struct {
	ctrl     *gomock.Controller
	recorder *MockStubMockRecorder
}

// MockStubMockRecorder is the mock recorder for MockStub.
type MockStubMockRecorder struct {
	mock *MockStub
}

// NewMockStub creates a new mock instance.
func NewMockStub(ctrl *gomock.Controller) *MockStub {
	mock := &MockStub{ctrl: ctrl}
	mock.recorder = &MockStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStub) EXPECT() *MockStubMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockStub) ChainID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockStubMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockStub)(nil).ChainID))
}

// ContractName mocks base method.
func (m *MockStub) ContractName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContractName indicates an expected call of ContractName.
func (mr *MockStubMockRecorder) ContractName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractName", reflect.TypeOf((*MockStub)(nil).ContractName))
}

// FuncName mocks base method.
func (m *MockStub) FuncName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FuncName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FuncName indicates an expected call of FuncName.
func (mr *MockStubMockRecorder) FuncName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuncName", reflect.TypeOf((*MockStub)(nil).FuncName))
}

// Parameters mocks base method.
func (m *MockStub) Parameters() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockStubMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockStub)(nil).Parameters))
}

// MockContractStub is a mock of ContractStub interface.
type MockContractStub struct {
	ctrl     *gomock.Controller
	recorder *MockContractStubMockRecorder
}

// MockContractStubMockRecorder is the mock recorder for MockContractStub.
type MockContractStubMockRecorder struct {
	mock *MockContractStub
}

// NewMockContractStub creates a new mock instance.
func NewMockContractStub(ctrl *gomock.Controller) *MockContractStub {
	mock := &MockContractStub{ctrl: ctrl}
	mock.recorder = &MockContractStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractStub) EXPECT() *MockContractStubMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockContractStub) ChainID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockContractStubMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockContractStub)(nil).ChainID))
}

// ContractName mocks base method.
func (m *MockContractStub) ContractName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContractName indicates an expected call of ContractName.
func (mr *MockContractStubMockRecorder) ContractName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractName", reflect.TypeOf((*MockContractStub)(nil).ContractName))
}

// DelComIndexOneRow mocks base method.
func (m *MockContractStub) DelComIndexOneRow(indexName string, attributes []string, objectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelComIndexOneRow", indexName, attributes, objectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelComIndexOneRow indicates an expected call of DelComIndexOneRow.
func (mr *MockContractStubMockRecorder) DelComIndexOneRow(indexName, attributes, objectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComIndexOneRow", reflect.TypeOf((*MockContractStub)(nil).DelComIndexOneRow), indexName, attributes, objectKey)
}

// DelKV mocks base method.
func (m *MockContractStub) DelKV(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelKV", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelKV indicates an expected call of DelKV.
func (mr *MockContractStubMockRecorder) DelKV(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelKV", reflect.TypeOf((*MockContractStub)(nil).DelKV), key)
}

// FuncName mocks base method.
func (m *MockContractStub) FuncName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FuncName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FuncName indicates an expected call of FuncName.
func (mr *MockContractStubMockRecorder) FuncName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuncName", reflect.TypeOf((*MockContractStub)(nil).FuncName))
}

// GetIterator mocks base method.
func (m *MockContractStub) GetIterator(startKey, endKey string) (Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIterator", startKey, endKey)
	ret0, _ := ret[0].(Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIterator indicates an expected call of GetIterator.
func (mr *MockContractStubMockRecorder) GetIterator(startKey, endKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterator", reflect.TypeOf((*MockContractStub)(nil).GetIterator), startKey, endKey)
}

// GetKV mocks base method.
func (m *MockContractStub) GetKV(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKV", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKV indicates an expected call of GetKV.
func (mr *MockContractStubMockRecorder) GetKV(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKV", reflect.TypeOf((*MockContractStub)(nil).GetKV), key)
}

// GetKVByComIndex mocks base method.
func (m *MockContractStub) GetKVByComIndex(indexName string, attributes []string) (Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKVByComIndex", indexName, attributes)
	ret0, _ := ret[0].(Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKVByComIndex indicates an expected call of GetKVByComIndex.
func (mr *MockContractStubMockRecorder) GetKVByComIndex(indexName, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKVByComIndex", reflect.TypeOf((*MockContractStub)(nil).GetKVByComIndex), indexName, attributes)
}

// GetKeyHistoryIterator mocks base method.
func (m *MockContractStub) GetKeyHistoryIterator(key string) (HistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyHistoryIterator", key)
	ret0, _ := ret[0].(HistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyHistoryIterator indicates an expected call of GetKeyHistoryIterator.
func (mr *MockContractStubMockRecorder) GetKeyHistoryIterator(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyHistoryIterator", reflect.TypeOf((*MockContractStub)(nil).GetKeyHistoryIterator), key)
}

// Parameters mocks base method.
func (m *MockContractStub) Parameters() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockContractStubMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockContractStub)(nil).Parameters))
}

// PutKV mocks base method.
func (m *MockContractStub) PutKV(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKV", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKV indicates an expected call of PutKV.
func (mr *MockContractStubMockRecorder) PutKV(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKV", reflect.TypeOf((*MockContractStub)(nil).PutKV), key, value)
}

// PutKVCommon mocks base method.
func (m *MockContractStub) PutKVCommon(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKVCommon", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKVCommon indicates an expected call of PutKVCommon.
func (mr *MockContractStubMockRecorder) PutKVCommon(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKVCommon", reflect.TypeOf((*MockContractStub)(nil).PutKVCommon), key, value)
}

// SaveComIndex mocks base method.
func (m *MockContractStub) SaveComIndex(indexName string, attributes []string, objectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComIndex", indexName, attributes, objectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveComIndex indicates an expected call of SaveComIndex.
func (mr *MockContractStubMockRecorder) SaveComIndex(indexName, attributes, objectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComIndex", reflect.TypeOf((*MockContractStub)(nil).SaveComIndex), indexName, attributes, objectKey)
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterator)(nil).Close))
}

// Key mocks base method.
func (m *MockIterator) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIterator)(nil).Key))
}

// Next mocks base method.
func (m *MockIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Value mocks base method.
func (m *MockIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIterator)(nil).Value))
}

// MockHistoryIterator is a mock of HistoryIterator interface.
type MockHistoryIterator struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryIteratorMockRecorder
}

// MockHistoryIteratorMockRecorder is the mock recorder for MockHistoryIterator.
type MockHistoryIteratorMockRecorder struct {
	mock *MockHistoryIterator
}

// NewMockHistoryIterator creates a new mock instance.
func NewMockHistoryIterator(ctrl *gomock.Controller) *MockHistoryIterator {
	mock := &MockHistoryIterator{ctrl: ctrl}
	mock.recorder = &MockHistoryIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryIterator) EXPECT() *MockHistoryIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHistoryIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHistoryIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHistoryIterator)(nil).Close))
}

// IsDeleted mocks base method.
func (m *MockHistoryIterator) IsDeleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeleted indicates an expected call of IsDeleted.
func (mr *MockHistoryIteratorMockRecorder) IsDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeleted", reflect.TypeOf((*MockHistoryIterator)(nil).IsDeleted))
}

// Key mocks base method.
func (m *MockHistoryIterator) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockHistoryIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockHistoryIterator)(nil).Key))
}

// Next mocks base method.
func (m *MockHistoryIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockHistoryIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockHistoryIterator)(nil).Next))
}

// Timestamp mocks base method.
func (m *MockHistoryIterator) Timestamp() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *MockHistoryIteratorMockRecorder) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockHistoryIterator)(nil).Timestamp))
}

// TxHash mocks base method.
func (m *MockHistoryIterator) TxHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// TxHash indicates an expected call of TxHash.
func (mr *MockHistoryIteratorMockRecorder) TxHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockHistoryIterator)(nil).TxHash))
}

// Value mocks base method.
func (m *MockHistoryIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockHistoryIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockHistoryIterator)(nil).Value))
}

// Version mocks base method.
func (m *MockHistoryIterator) Version() (uint64, int32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(int32)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockHistoryIteratorMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockHistoryIterator)(nil).Version))
}

// MockValueSerialization is a mock of ValueSerialization interface.
type MockValueSerialization struct {
	ctrl     *gomock.Controller
	recorder *MockValueSerializationMockRecorder
}

// MockValueSerializationMockRecorder is the mock recorder for MockValueSerialization.
type MockValueSerializationMockRecorder struct {
	mock *MockValueSerialization
}

// NewMockValueSerialization creates a new mock instance.
func NewMockValueSerialization(ctrl *gomock.Controller) *MockValueSerialization {
	mock := &MockValueSerialization{ctrl: ctrl}
	mock.recorder = &MockValueSerializationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueSerialization) EXPECT() *MockValueSerializationMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockValueSerialization) Marshal() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockValueSerializationMockRecorder) Marshal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockValueSerialization)(nil).Marshal))
}
