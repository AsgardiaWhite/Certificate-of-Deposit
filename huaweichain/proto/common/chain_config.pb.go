// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/chain_config.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DBType int32

const (
	LEVELDB    DBType = 0
	MYSQL      DBType = 1
	POSTGRESQL DBType = 2
	ROCKSDB    DBType = 3
)

var DBType_name = map[int32]string{
	0: "LEVELDB",
	1: "MYSQL",
	2: "POSTGRESQL",
	3: "ROCKSDB",
}

var DBType_value = map[string]int32{
	"LEVELDB":    0,
	"MYSQL":      1,
	"POSTGRESQL": 2,
	"ROCKSDB":    3,
}

func (x DBType) String() string {
	return proto.EnumName(DBType_name, int32(x))
}

func (DBType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{0}
}

type Handler int32

const (
	CONFIG             Handler = 0
	LIFECYCLE          Handler = 1
	CONS_PREPARE       Handler = 2
	CONS_COMPLETE      Handler = 3
	DOMAIN             Handler = 4
	ZONE               Handler = 5
	ARCHIVE            Handler = 6
	RECORD             Handler = 7
	CERT_STATUS_CHANGE Handler = 8
)

var Handler_name = map[int32]string{
	0: "CONFIG",
	1: "LIFECYCLE",
	2: "CONS_PREPARE",
	3: "CONS_COMPLETE",
	4: "DOMAIN",
	5: "ZONE",
	6: "ARCHIVE",
	7: "RECORD",
	8: "CERT_STATUS_CHANGE",
}

var Handler_value = map[string]int32{
	"CONFIG":             0,
	"LIFECYCLE":          1,
	"CONS_PREPARE":       2,
	"CONS_COMPLETE":      3,
	"DOMAIN":             4,
	"ZONE":               5,
	"ARCHIVE":            6,
	"RECORD":             7,
	"CERT_STATUS_CHANGE": 8,
}

func (x Handler) String() string {
	return proto.EnumName(Handler_name, int32(x))
}

func (Handler) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{1}
}

type ConfigSet_Operation int32

const (
	OP_APPEND  ConfigSet_Operation = 0
	OP_REMOVE  ConfigSet_Operation = 1
	OP_REPLACE ConfigSet_Operation = 2
)

var ConfigSet_Operation_name = map[int32]string{
	0: "OP_APPEND",
	1: "OP_REMOVE",
	2: "OP_REPLACE",
}

var ConfigSet_Operation_value = map[string]int32{
	"OP_APPEND":  0,
	"OP_REMOVE":  1,
	"OP_REPLACE": 2,
}

func (x ConfigSet_Operation) String() string {
	return proto.EnumName(ConfigSet_Operation_name, int32(x))
}

func (ConfigSet_Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{4, 0}
}

// Config info
type ConfigInfo struct {
	CommitBlock uint64       `protobuf:"varint,1,opt,name=commit_block,json=commitBlock,proto3" json:"commit_block,omitempty"`
	Config      *ChainConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ConfigInfo) Reset()         { *m = ConfigInfo{} }
func (m *ConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConfigInfo) ProtoMessage()    {}
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{0}
}
func (m *ConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfo.Merge(m, src)
}
func (m *ConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfo proto.InternalMessageInfo

// Chain config
type ChainConfig struct {
	ChainId            string          `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Organizations      []*Organization `protobuf:"bytes,2,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Consensus          []byte          `protobuf:"bytes,3,opt,name=consensus,proto3" json:"consensus,omitempty"`
	DbType             DBType          `protobuf:"varint,4,opt,name=db_type,json=dbType,proto3,enum=common.DBType" json:"db_type,omitempty"`
	ConfigPolicy       string          `protobuf:"bytes,5,opt,name=configPolicy,proto3" json:"configPolicy,omitempty"`
	LifecyclePolicy    string          `protobuf:"bytes,6,opt,name=lifecyclePolicy,proto3" json:"lifecyclePolicy,omitempty"`
	Network            []byte          `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	BlockLimit         int64           `protobuf:"zigzag64,8,opt,name=block_limit,json=blockLimit,proto3" json:"block_limit,omitempty"`
	OrgLimit           bool            `protobuf:"varint,9,opt,name=org_limit,json=orgLimit,proto3" json:"org_limit,omitempty"`
	ApprovalNoCert     bool            `protobuf:"varint,10,opt,name=approvalNoCert,proto3" json:"approvalNoCert,omitempty"`
	MinPlatformVersion string          `protobuf:"bytes,11,opt,name=min_platform_version,json=minPlatformVersion,proto3" json:"min_platform_version,omitempty"`
}

func (m *ChainConfig) Reset()         { *m = ChainConfig{} }
func (m *ChainConfig) String() string { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()    {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{1}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

type Organization struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RootCert    []byte `protobuf:"bytes,2,opt,name=rootCert,proto3" json:"rootCert,omitempty"`
	AdminCert   []byte `protobuf:"bytes,3,opt,name=adminCert,proto3" json:"adminCert,omitempty"`
	TLSRootCert []byte `protobuf:"bytes,4,opt,name=TLSRootCert,proto3" json:"TLSRootCert,omitempty"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{2}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return m.Size()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

type ChainMeta struct {
	ChainId       string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IsQuitting    bool        `protobuf:"varint,2,opt,name=isQuitting,proto3" json:"isQuitting,omitempty"`
	LatestCfg     *ConfigInfo `protobuf:"bytes,3,opt,name=latestCfg,proto3" json:"latestCfg,omitempty"`
	DbType        DBType      `protobuf:"varint,4,opt,name=db_type,json=dbType,proto3,enum=common.DBType" json:"db_type,omitempty"`
	SchemaVersion uint64      `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
}

func (m *ChainMeta) Reset()         { *m = ChainMeta{} }
func (m *ChainMeta) String() string { return proto.CompactTextString(m) }
func (*ChainMeta) ProtoMessage()    {}
func (*ChainMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{3}
}
func (m *ChainMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainMeta.Merge(m, src)
}
func (m *ChainMeta) XXX_Size() int {
	return m.Size()
}
func (m *ChainMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ChainMeta proto.InternalMessageInfo

type ConfigSet struct {
	// Types that are valid to be assigned to Value:
	//	*ConfigSet_ConfigPolicy
	//	*ConfigSet_LifecyclePolicy
	//	*ConfigSet_OrgUpdates_
	//	*ConfigSet_ConsenterUpdate
	//	*ConfigSet_Net
	//	*ConfigSet_MinPlatformVersion
	Value isConfigSet_Value `protobuf_oneof:"value"`
}

func (m *ConfigSet) Reset()         { *m = ConfigSet{} }
func (m *ConfigSet) String() string { return proto.CompactTextString(m) }
func (*ConfigSet) ProtoMessage()    {}
func (*ConfigSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{4}
}
func (m *ConfigSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSet.Merge(m, src)
}
func (m *ConfigSet) XXX_Size() int {
	return m.Size()
}
func (m *ConfigSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSet.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSet proto.InternalMessageInfo

type isConfigSet_Value interface {
	isConfigSet_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConfigSet_ConfigPolicy struct {
	ConfigPolicy string `protobuf:"bytes,1,opt,name=config_policy,json=configPolicy,proto3,oneof" json:"config_policy,omitempty"`
}
type ConfigSet_LifecyclePolicy struct {
	LifecyclePolicy string `protobuf:"bytes,2,opt,name=lifecycle_policy,json=lifecyclePolicy,proto3,oneof" json:"lifecycle_policy,omitempty"`
}
type ConfigSet_OrgUpdates_ struct {
	OrgUpdates *ConfigSet_OrgUpdates `protobuf:"bytes,3,opt,name=org_updates,json=orgUpdates,proto3,oneof" json:"org_updates,omitempty"`
}
type ConfigSet_ConsenterUpdate struct {
	ConsenterUpdate []byte `protobuf:"bytes,4,opt,name=consenter_update,json=consenterUpdate,proto3,oneof" json:"consenter_update,omitempty"`
}
type ConfigSet_Net struct {
	Net *NetUpdate `protobuf:"bytes,5,opt,name=net,proto3,oneof" json:"net,omitempty"`
}
type ConfigSet_MinPlatformVersion struct {
	MinPlatformVersion string `protobuf:"bytes,6,opt,name=min_platform_version,json=minPlatformVersion,proto3,oneof" json:"min_platform_version,omitempty"`
}

func (*ConfigSet_ConfigPolicy) isConfigSet_Value()       {}
func (*ConfigSet_LifecyclePolicy) isConfigSet_Value()    {}
func (*ConfigSet_OrgUpdates_) isConfigSet_Value()        {}
func (*ConfigSet_ConsenterUpdate) isConfigSet_Value()    {}
func (*ConfigSet_Net) isConfigSet_Value()                {}
func (*ConfigSet_MinPlatformVersion) isConfigSet_Value() {}

func (m *ConfigSet) GetValue() isConfigSet_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ConfigSet) GetConfigPolicy() string {
	if x, ok := m.GetValue().(*ConfigSet_ConfigPolicy); ok {
		return x.ConfigPolicy
	}
	return ""
}

func (m *ConfigSet) GetLifecyclePolicy() string {
	if x, ok := m.GetValue().(*ConfigSet_LifecyclePolicy); ok {
		return x.LifecyclePolicy
	}
	return ""
}

func (m *ConfigSet) GetOrgUpdates() *ConfigSet_OrgUpdates {
	if x, ok := m.GetValue().(*ConfigSet_OrgUpdates_); ok {
		return x.OrgUpdates
	}
	return nil
}

func (m *ConfigSet) GetConsenterUpdate() []byte {
	if x, ok := m.GetValue().(*ConfigSet_ConsenterUpdate); ok {
		return x.ConsenterUpdate
	}
	return nil
}

func (m *ConfigSet) GetNet() *NetUpdate {
	if x, ok := m.GetValue().(*ConfigSet_Net); ok {
		return x.Net
	}
	return nil
}

func (m *ConfigSet) GetMinPlatformVersion() string {
	if x, ok := m.GetValue().(*ConfigSet_MinPlatformVersion); ok {
		return x.MinPlatformVersion
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConfigSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConfigSet_ConfigPolicy)(nil),
		(*ConfigSet_LifecyclePolicy)(nil),
		(*ConfigSet_OrgUpdates_)(nil),
		(*ConfigSet_ConsenterUpdate)(nil),
		(*ConfigSet_Net)(nil),
		(*ConfigSet_MinPlatformVersion)(nil),
	}
}

type ConfigSet_OrgUpdate struct {
	Operation    ConfigSet_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=common.ConfigSet_Operation" json:"operation,omitempty"`
	Organization *Organization       `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *ConfigSet_OrgUpdate) Reset()         { *m = ConfigSet_OrgUpdate{} }
func (m *ConfigSet_OrgUpdate) String() string { return proto.CompactTextString(m) }
func (*ConfigSet_OrgUpdate) ProtoMessage()    {}
func (*ConfigSet_OrgUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{4, 0}
}
func (m *ConfigSet_OrgUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigSet_OrgUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigSet_OrgUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigSet_OrgUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSet_OrgUpdate.Merge(m, src)
}
func (m *ConfigSet_OrgUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ConfigSet_OrgUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSet_OrgUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSet_OrgUpdate proto.InternalMessageInfo

type ConfigSet_OrgUpdates struct {
	OrgUpdate []*ConfigSet_OrgUpdate `protobuf:"bytes,1,rep,name=org_update,json=orgUpdate,proto3" json:"org_update,omitempty"`
}

func (m *ConfigSet_OrgUpdates) Reset()         { *m = ConfigSet_OrgUpdates{} }
func (m *ConfigSet_OrgUpdates) String() string { return proto.CompactTextString(m) }
func (*ConfigSet_OrgUpdates) ProtoMessage()    {}
func (*ConfigSet_OrgUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069ae8596eb6cd0, []int{4, 1}
}
func (m *ConfigSet_OrgUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigSet_OrgUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigSet_OrgUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigSet_OrgUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSet_OrgUpdates.Merge(m, src)
}
func (m *ConfigSet_OrgUpdates) XXX_Size() int {
	return m.Size()
}
func (m *ConfigSet_OrgUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSet_OrgUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSet_OrgUpdates proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.DBType", DBType_name, DBType_value)
	proto.RegisterEnum("common.Handler", Handler_name, Handler_value)
	proto.RegisterEnum("common.ConfigSet_Operation", ConfigSet_Operation_name, ConfigSet_Operation_value)
	proto.RegisterType((*ConfigInfo)(nil), "common.ConfigInfo")
	proto.RegisterType((*ChainConfig)(nil), "common.ChainConfig")
	proto.RegisterType((*Organization)(nil), "common.Organization")
	proto.RegisterType((*ChainMeta)(nil), "common.ChainMeta")
	proto.RegisterType((*ConfigSet)(nil), "common.ConfigSet")
	proto.RegisterType((*ConfigSet_OrgUpdate)(nil), "common.ConfigSet.OrgUpdate")
	proto.RegisterType((*ConfigSet_OrgUpdates)(nil), "common.ConfigSet.OrgUpdates")
}

func init() { proto.RegisterFile("common/chain_config.proto", fileDescriptor_5069ae8596eb6cd0) }

var fileDescriptor_5069ae8596eb6cd0 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6f, 0x6f, 0xda, 0x46,
	0x18, 0xc7, 0x40, 0x00, 0x3f, 0x4e, 0x98, 0x7b, 0xeb, 0x26, 0x37, 0xa9, 0x18, 0x63, 0xca, 0x86,
	0x5a, 0x29, 0xa9, 0x98, 0x26, 0xad, 0x95, 0xa6, 0x09, 0x8c, 0x1b, 0xd0, 0x08, 0xa6, 0x07, 0x8d,
	0xd4, 0x6a, 0x92, 0xe5, 0x98, 0x0b, 0x39, 0x15, 0xfb, 0x90, 0x7d, 0x49, 0x94, 0x69, 0x9a, 0xf6,
	0x11, 0xfa, 0x3d, 0xf6, 0x09, 0xf6, 0x0d, 0xf2, 0x32, 0x2f, 0xf7, 0x72, 0x4d, 0xbe, 0xc8, 0x74,
	0x77, 0xc6, 0x21, 0x59, 0x56, 0xed, 0x15, 0x3c, 0xbf, 0xe7, 0xf7, 0xfc, 0xbd, 0xdf, 0x9d, 0xe1,
	0x51, 0xc0, 0xc2, 0x90, 0x45, 0xbb, 0xc1, 0xb1, 0x4f, 0x23, 0x2f, 0x60, 0xd1, 0x11, 0x9d, 0xed,
	0x2c, 0x62, 0xc6, 0x19, 0x2a, 0x29, 0xd7, 0xe6, 0xc3, 0x19, 0x9b, 0x31, 0x09, 0xed, 0x8a, 0x7f,
	0xca, 0xbb, 0xf9, 0x59, 0x1a, 0x18, 0x11, 0x2e, 0xc3, 0x14, 0xdc, 0xf8, 0x19, 0xc0, 0x96, 0x49,
	0xfa, 0xd1, 0x11, 0x43, 0x5f, 0xc2, 0xba, 0xa0, 0x51, 0xee, 0x1d, 0xce, 0x59, 0xf0, 0xce, 0xd2,
	0xea, 0x5a, 0xb3, 0x88, 0x0d, 0x85, 0x75, 0x04, 0x84, 0x9e, 0x42, 0x49, 0x55, 0xb5, 0xf2, 0x75,
	0xad, 0x69, 0xb4, 0x3e, 0xdd, 0x51, 0x89, 0x77, 0x6c, 0xd1, 0x91, 0xca, 0x85, 0x53, 0x4a, 0xe3,
	0x8f, 0x02, 0x18, 0x2b, 0x38, 0x7a, 0x04, 0x15, 0xd5, 0x38, 0x9d, 0xca, 0xdc, 0x3a, 0x2e, 0x4b,
	0xbb, 0x3f, 0x45, 0x2f, 0x60, 0x83, 0xc5, 0x33, 0x3f, 0xa2, 0xbf, 0xf8, 0x9c, 0xb2, 0x28, 0xb1,
	0xf2, 0xf5, 0x42, 0xd3, 0x68, 0x3d, 0x5c, 0xa6, 0x77, 0x57, 0x9c, 0xf8, 0x36, 0x15, 0x3d, 0x06,
	0x3d, 0x60, 0x51, 0x42, 0xa2, 0xe4, 0x24, 0xb1, 0x0a, 0x75, 0xad, 0xb9, 0x8e, 0x6f, 0x00, 0xf4,
	0x0d, 0x94, 0xa7, 0x87, 0x1e, 0x3f, 0x5f, 0x10, 0xab, 0x58, 0xd7, 0x9a, 0xd5, 0x56, 0x75, 0x99,
	0xb3, 0xdb, 0x99, 0x9c, 0x2f, 0x08, 0x2e, 0x4d, 0x0f, 0xc5, 0x2f, 0x6a, 0x88, 0xe9, 0x45, 0x9f,
	0x23, 0x36, 0xa7, 0xc1, 0xb9, 0xb5, 0x26, 0x3b, 0xbc, 0x85, 0xa1, 0x26, 0x7c, 0x32, 0xa7, 0x47,
	0x24, 0x38, 0x0f, 0xe6, 0x24, 0xa5, 0x95, 0x24, 0xed, 0x2e, 0x8c, 0x2c, 0x28, 0x47, 0x84, 0x9f,
	0xb1, 0xf8, 0x9d, 0x55, 0x96, 0x2d, 0x2d, 0x4d, 0xf4, 0x05, 0x18, 0x72, 0xbd, 0xde, 0x9c, 0x86,
	0x94, 0x5b, 0x95, 0xba, 0xd6, 0x44, 0x18, 0x24, 0x34, 0x10, 0x08, 0xda, 0x02, 0x9d, 0xc5, 0xb3,
	0xd4, 0xad, 0xd7, 0xb5, 0x66, 0x05, 0x57, 0x58, 0x3c, 0x53, 0xce, 0xaf, 0xa1, 0xea, 0x2f, 0x16,
	0x31, 0x3b, 0xf5, 0xe7, 0x43, 0x66, 0x93, 0x98, 0x5b, 0x20, 0x19, 0x77, 0x50, 0xf4, 0x0c, 0x1e,
	0x86, 0x34, 0xf2, 0x16, 0x73, 0x9f, 0x1f, 0xb1, 0x38, 0xf4, 0x4e, 0x49, 0x9c, 0x50, 0x16, 0x59,
	0x86, 0x6c, 0x17, 0x85, 0x34, 0x1a, 0xa5, 0xae, 0x03, 0xe5, 0x69, 0xfc, 0x06, 0xeb, 0xab, 0x5b,
	0x46, 0x08, 0x8a, 0x91, 0x1f, 0x92, 0xf4, 0xa4, 0xe4, 0x7f, 0xb4, 0x09, 0x95, 0x98, 0x31, 0x2e,
	0xeb, 0xe6, 0xe5, 0x58, 0x99, 0x2d, 0x8e, 0xc1, 0x9f, 0x86, 0x34, 0x92, 0xce, 0xf4, 0x18, 0x32,
	0x00, 0xd5, 0xc1, 0x98, 0x0c, 0xc6, 0x78, 0x19, 0x5c, 0x94, 0xfe, 0x55, 0xa8, 0x71, 0xa1, 0x81,
	0x2e, 0xd5, 0xb2, 0x4f, 0xb8, 0xff, 0x31, 0xad, 0xd4, 0x00, 0x68, 0xf2, 0xea, 0x84, 0x72, 0x4e,
	0x23, 0xa5, 0xc3, 0x0a, 0x5e, 0x41, 0xd0, 0x33, 0xd0, 0xe7, 0x3e, 0x27, 0x09, 0xb7, 0x8f, 0x66,
	0xb2, 0x11, 0xa3, 0x85, 0x32, 0x99, 0x66, 0x6a, 0xc7, 0x37, 0xa4, 0xff, 0xaf, 0x91, 0x6d, 0xa8,
	0x26, 0xc1, 0x31, 0x09, 0xfd, 0x6c, 0x9f, 0x6b, 0xf2, 0x8e, 0x6c, 0x28, 0x74, 0xb9, 0xca, 0x3f,
	0x8b, 0xa0, 0xab, 0x4a, 0x63, 0xc2, 0xd1, 0x36, 0x6c, 0x28, 0x11, 0x79, 0x0b, 0x25, 0x19, 0x39,
	0x4f, 0x2f, 0x77, 0x47, 0x5b, 0x4f, 0xc1, 0xcc, 0x44, 0xb4, 0x64, 0xe6, 0x53, 0xe6, 0xbf, 0xe4,
	0xf5, 0x23, 0x18, 0x42, 0x23, 0x27, 0x8b, 0xa9, 0x18, 0x22, 0x9d, 0xf2, 0xf1, 0xed, 0x29, 0xc7,
	0x84, 0x8b, 0x7b, 0xf3, 0x5a, 0x71, 0x7a, 0x39, 0x0c, 0x2c, 0xb3, 0x44, 0x35, 0x75, 0x47, 0x38,
	0x89, 0xd3, 0x34, 0xea, 0x50, 0x44, 0xb5, 0xcc, 0xa3, 0xd8, 0x68, 0x1b, 0x0a, 0x11, 0xe1, 0x72,
	0x56, 0xa3, 0xf5, 0x60, 0x59, 0x65, 0x48, 0xb8, 0xf2, 0xf7, 0x72, 0x58, 0xf8, 0x51, 0xeb, 0x3f,
	0x34, 0x57, 0x4a, 0xa7, 0xb8, 0x47, 0x75, 0x9b, 0xbf, 0x6b, 0xa0, 0x67, 0x4d, 0xa2, 0xe7, 0xa0,
	0xb3, 0x05, 0x89, 0xa5, 0x00, 0xe5, 0x9a, 0xaa, 0xad, 0xad, 0x7b, 0x86, 0x5a, 0x52, 0xf0, 0x0d,
	0x1b, 0x7d, 0x0f, 0xeb, 0xab, 0xcf, 0x42, 0xfa, 0x3e, 0xdd, 0xff, 0x80, 0xdc, 0x62, 0x6e, 0xf6,
	0x00, 0x6e, 0xd6, 0x84, 0x5e, 0x00, 0xdc, 0x6c, 0xd6, 0xd2, 0xe4, 0x33, 0xb4, 0xf5, 0x91, 0xc5,
	0x62, 0x3d, 0xdb, 0x6a, 0xe3, 0x39, 0xe8, 0x59, 0x6f, 0x68, 0x03, 0x74, 0x77, 0xe4, 0xb5, 0x47,
	0x23, 0x67, 0xd8, 0x35, 0x73, 0xa9, 0x89, 0x9d, 0x7d, 0xf7, 0xc0, 0x31, 0x35, 0x54, 0x05, 0x90,
	0xe6, 0x68, 0xd0, 0xb6, 0x1d, 0x33, 0xdf, 0x29, 0xc3, 0xda, 0xa9, 0x3f, 0x3f, 0x21, 0x4f, 0x7e,
	0x80, 0x92, 0x12, 0x1d, 0x32, 0xa0, 0x3c, 0x70, 0x0e, 0x9c, 0x41, 0xb7, 0x63, 0xe6, 0x90, 0x0e,
	0x6b, 0xfb, 0x6f, 0xc6, 0xaf, 0x06, 0x2a, 0x74, 0xe4, 0x8e, 0x27, 0x7b, 0xd8, 0x11, 0x76, 0x5e,
	0xf0, 0xb0, 0x6b, 0xff, 0x34, 0xee, 0x76, 0xcc, 0xc2, 0x93, 0xf7, 0x1a, 0x94, 0x7b, 0x7e, 0x34,
	0x9d, 0x93, 0x18, 0x01, 0x94, 0x6c, 0x77, 0xf8, 0xb2, 0xbf, 0xa7, 0xca, 0x0f, 0xfa, 0x2f, 0x1d,
	0xfb, 0x8d, 0x3d, 0x10, 0xe5, 0x4d, 0x58, 0xb7, 0xdd, 0xe1, 0xd8, 0x1b, 0x61, 0x67, 0xd4, 0xc6,
	0x8e, 0x99, 0x47, 0x0f, 0x60, 0x43, 0x22, 0xb6, 0xbb, 0x3f, 0x1a, 0x38, 0x13, 0xc7, 0x2c, 0x88,
	0xf8, 0xae, 0xbb, 0xdf, 0xee, 0x0f, 0xcd, 0x22, 0xaa, 0x40, 0xf1, 0xad, 0x3b, 0x74, 0xcc, 0x35,
	0x51, 0xae, 0x8d, 0xed, 0x5e, 0xff, 0xc0, 0x31, 0x4b, 0x82, 0x82, 0x1d, 0xdb, 0xc5, 0x5d, 0xb3,
	0x8c, 0x3e, 0x07, 0x64, 0x3b, 0x78, 0xe2, 0x8d, 0x27, 0xed, 0xc9, 0xeb, 0xb1, 0x67, 0xf7, 0xda,
	0xc3, 0x3d, 0xc7, 0xac, 0x74, 0x7e, 0xbd, 0xf8, 0x50, 0xcb, 0x5d, 0x7e, 0xa8, 0xe5, 0x2e, 0xae,
	0x6a, 0xda, 0xe5, 0x55, 0x4d, 0xfb, 0xfb, 0xaa, 0xa6, 0xbd, 0xbf, 0xae, 0xe5, 0x2e, 0xaf, 0x6b,
	0xb9, 0xbf, 0xae, 0x6b, 0x39, 0xf8, 0x2a, 0x60, 0xe1, 0xce, 0xf1, 0x89, 0x7f, 0x46, 0xe8, 0xce,
	0x19, 0x25, 0x11, 0x89, 0xe5, 0x5d, 0x57, 0x1f, 0xa9, 0x74, 0xf7, 0x6f, 0xbf, 0x9b, 0x51, 0xbe,
	0x24, 0x05, 0x2c, 0xdc, 0x5d, 0x30, 0x9a, 0x24, 0x42, 0xa8, 0x7e, 0x1c, 0x1c, 0xef, 0xae, 0x84,
	0xed, 0xaa, 0xaf, 0x9f, 0x0a, 0x3b, 0x2c, 0x49, 0xeb, 0xdb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xa5, 0xcb, 0xa5, 0x63, 0x3b, 0x07, 0x00, 0x00,
}

func (m *ConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CommitBlock != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64(m.CommitBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinPlatformVersion) > 0 {
		i -= len(m.MinPlatformVersion)
		copy(dAtA[i:], m.MinPlatformVersion)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.MinPlatformVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ApprovalNoCert {
		i--
		if m.ApprovalNoCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.OrgLimit {
		i--
		if m.OrgLimit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.BlockLimit != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64((uint64(m.BlockLimit)<<1)^uint64((m.BlockLimit>>63))))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LifecyclePolicy) > 0 {
		i -= len(m.LifecyclePolicy)
		copy(dAtA[i:], m.LifecyclePolicy)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.LifecyclePolicy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConfigPolicy) > 0 {
		i -= len(m.ConfigPolicy)
		copy(dAtA[i:], m.ConfigPolicy)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.ConfigPolicy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DbType != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64(m.DbType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Consensus) > 0 {
		i -= len(m.Consensus)
		copy(dAtA[i:], m.Consensus)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.Consensus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Organization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TLSRootCert) > 0 {
		i -= len(m.TLSRootCert)
		copy(dAtA[i:], m.TLSRootCert)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.TLSRootCert)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AdminCert) > 0 {
		i -= len(m.AdminCert)
		copy(dAtA[i:], m.AdminCert)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.AdminCert)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RootCert) > 0 {
		i -= len(m.RootCert)
		copy(dAtA[i:], m.RootCert)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.RootCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.DbType != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64(m.DbType))
		i--
		dAtA[i] = 0x20
	}
	if m.LatestCfg != nil {
		{
			size, err := m.LatestCfg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsQuitting {
		i--
		if m.IsQuitting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSet_ConfigPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_ConfigPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ConfigPolicy)
	copy(dAtA[i:], m.ConfigPolicy)
	i = encodeVarintChainConfig(dAtA, i, uint64(len(m.ConfigPolicy)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *ConfigSet_LifecyclePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_LifecyclePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.LifecyclePolicy)
	copy(dAtA[i:], m.LifecyclePolicy)
	i = encodeVarintChainConfig(dAtA, i, uint64(len(m.LifecyclePolicy)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ConfigSet_OrgUpdates_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_OrgUpdates_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrgUpdates != nil {
		{
			size, err := m.OrgUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ConfigSet_ConsenterUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_ConsenterUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConsenterUpdate != nil {
		i -= len(m.ConsenterUpdate)
		copy(dAtA[i:], m.ConsenterUpdate)
		i = encodeVarintChainConfig(dAtA, i, uint64(len(m.ConsenterUpdate)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ConfigSet_Net) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_Net) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Net != nil {
		{
			size, err := m.Net.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ConfigSet_MinPlatformVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_MinPlatformVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.MinPlatformVersion)
	copy(dAtA[i:], m.MinPlatformVersion)
	i = encodeVarintChainConfig(dAtA, i, uint64(len(m.MinPlatformVersion)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *ConfigSet_OrgUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSet_OrgUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_OrgUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Organization != nil {
		{
			size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Operation != 0 {
		i = encodeVarintChainConfig(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSet_OrgUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSet_OrgUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSet_OrgUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgUpdate) > 0 {
		for iNdEx := len(m.OrgUpdate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrgUpdate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitBlock != 0 {
		n += 1 + sovChainConfig(uint64(m.CommitBlock))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovChainConfig(uint64(l))
		}
	}
	l = len(m.Consensus)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	if m.DbType != 0 {
		n += 1 + sovChainConfig(uint64(m.DbType))
	}
	l = len(m.ConfigPolicy)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	l = len(m.LifecyclePolicy)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	if m.BlockLimit != 0 {
		n += 1 + sozChainConfig(uint64(m.BlockLimit))
	}
	if m.OrgLimit {
		n += 2
	}
	if m.ApprovalNoCert {
		n += 2
	}
	l = len(m.MinPlatformVersion)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}

func (m *Organization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	l = len(m.RootCert)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	l = len(m.AdminCert)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	l = len(m.TLSRootCert)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}

func (m *ChainMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovChainConfig(uint64(l))
	}
	if m.IsQuitting {
		n += 2
	}
	if m.LatestCfg != nil {
		l = m.LatestCfg.Size()
		n += 1 + l + sovChainConfig(uint64(l))
	}
	if m.DbType != 0 {
		n += 1 + sovChainConfig(uint64(m.DbType))
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovChainConfig(uint64(m.SchemaVersion))
	}
	return n
}

func (m *ConfigSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ConfigSet_ConfigPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigPolicy)
	n += 1 + l + sovChainConfig(uint64(l))
	return n
}
func (m *ConfigSet_LifecyclePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LifecyclePolicy)
	n += 1 + l + sovChainConfig(uint64(l))
	return n
}
func (m *ConfigSet_OrgUpdates_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgUpdates != nil {
		l = m.OrgUpdates.Size()
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}
func (m *ConfigSet_ConsenterUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsenterUpdate != nil {
		l = len(m.ConsenterUpdate)
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}
func (m *ConfigSet_Net) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Net != nil {
		l = m.Net.Size()
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}
func (m *ConfigSet_MinPlatformVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinPlatformVersion)
	n += 1 + l + sovChainConfig(uint64(l))
	return n
}
func (m *ConfigSet_OrgUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovChainConfig(uint64(m.Operation))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovChainConfig(uint64(l))
	}
	return n
}

func (m *ConfigSet_OrgUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrgUpdate) > 0 {
		for _, e := range m.OrgUpdate {
			l = e.Size()
			n += 1 + l + sovChainConfig(uint64(l))
		}
	}
	return n
}

func sovChainConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainConfig(x uint64) (n int) {
	return sovChainConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitBlock", wireType)
			}
			m.CommitBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ChainConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, &Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consensus = append(m.Consensus[:0], dAtA[iNdEx:postIndex]...)
			if m.Consensus == nil {
				m.Consensus = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbType", wireType)
			}
			m.DbType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbType |= DBType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifecyclePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifecyclePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network[:0], dAtA[iNdEx:postIndex]...)
			if m.Network == nil {
				m.Network = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.BlockLimit = int64(v)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgLimit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrgLimit = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalNoCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApprovalNoCert = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCert = append(m.RootCert[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCert == nil {
				m.RootCert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminCert = append(m.AdminCert[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminCert == nil {
				m.AdminCert = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSRootCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSRootCert = append(m.TLSRootCert[:0], dAtA[iNdEx:postIndex]...)
			if m.TLSRootCert == nil {
				m.TLSRootCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsQuitting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsQuitting = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestCfg == nil {
				m.LatestCfg = &ConfigInfo{}
			}
			if err := m.LatestCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbType", wireType)
			}
			m.DbType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbType |= DBType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ConfigSet_ConfigPolicy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifecyclePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ConfigSet_LifecyclePolicy{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigSet_OrgUpdates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ConfigSet_OrgUpdates_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsenterUpdate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &ConfigSet_ConsenterUpdate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NetUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ConfigSet_Net{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &ConfigSet_MinPlatformVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSet_OrgUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= ConfigSet_Operation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSet_OrgUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgUpdate = append(m.OrgUpdate, &ConfigSet_OrgUpdate{})
			if err := m.OrgUpdate[len(m.OrgUpdate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainConfig = fmt.Errorf("proto: unexpected end of group")
)
