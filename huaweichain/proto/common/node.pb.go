// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/node.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeStatus int32

const (
	INACTIVE NodeStatus = 0
	ACTIVE   NodeStatus = 1
)

var NodeStatus_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}

var NodeStatus_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x NodeStatus) String() string {
	return proto.EnumName(NodeStatus_name, int32(x))
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe0d67cf988b3585, []int{0}
}

type Node struct {
	Endpoint string     `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Status   NodeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=common.NodeStatus" json:"status,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe0d67cf988b3585, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type SelfNode struct {
	Node          *Node  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	AllNodes      uint32 `protobuf:"varint,2,opt,name=all_nodes,json=allNodes,proto3" json:"all_nodes,omitempty"`
	ActiveNodes   uint32 `protobuf:"varint,3,opt,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`
	InactiveNodes uint32 `protobuf:"varint,4,opt,name=inactive_nodes,json=inactiveNodes,proto3" json:"inactive_nodes,omitempty"`
}

func (m *SelfNode) Reset()         { *m = SelfNode{} }
func (m *SelfNode) String() string { return proto.CompactTextString(m) }
func (*SelfNode) ProtoMessage()    {}
func (*SelfNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe0d67cf988b3585, []int{1}
}
func (m *SelfNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelfNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelfNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelfNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelfNode.Merge(m, src)
}
func (m *SelfNode) XXX_Size() int {
	return m.Size()
}
func (m *SelfNode) XXX_DiscardUnknown() {
	xxx_messageInfo_SelfNode.DiscardUnknown(m)
}

var xxx_messageInfo_SelfNode proto.InternalMessageInfo

type OrgNodes struct {
	Myself *SelfNode `protobuf:"bytes,1,opt,name=myself,proto3" json:"myself,omitempty"`
	Nodes  []*Node   `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *OrgNodes) Reset()         { *m = OrgNodes{} }
func (m *OrgNodes) String() string { return proto.CompactTextString(m) }
func (*OrgNodes) ProtoMessage()    {}
func (*OrgNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe0d67cf988b3585, []int{2}
}
func (m *OrgNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrgNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrgNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrgNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrgNodes.Merge(m, src)
}
func (m *OrgNodes) XXX_Size() int {
	return m.Size()
}
func (m *OrgNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrgNodes.DiscardUnknown(m)
}

var xxx_messageInfo_OrgNodes proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterType((*Node)(nil), "common.Node")
	proto.RegisterType((*SelfNode)(nil), "common.SelfNode")
	proto.RegisterType((*OrgNodes)(nil), "common.OrgNodes")
}

func init() { proto.RegisterFile("common/node.proto", fileDescriptor_fe0d67cf988b3585) }

var fileDescriptor_fe0d67cf988b3585 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xcf, 0x4a, 0xc3, 0x30,
	0x18, 0x6f, 0xdc, 0x2c, 0xdd, 0xb7, 0x3f, 0xcc, 0xe0, 0x61, 0x4c, 0x08, 0xb3, 0xa2, 0x8c, 0x1d,
	0x5a, 0x98, 0xf8, 0x00, 0x2a, 0x1e, 0x76, 0x99, 0xd0, 0x89, 0x88, 0x17, 0xa9, 0x5d, 0xd6, 0x05,
	0xda, 0x64, 0x34, 0x9d, 0x43, 0xf0, 0x21, 0x04, 0x5f, 0x6a, 0xc7, 0x1d, 0x3d, 0xba, 0xed, 0x45,
	0xa4, 0x49, 0xab, 0x13, 0x6f, 0xdf, 0xf7, 0xfb, 0x97, 0x1f, 0xf9, 0xe0, 0x20, 0x10, 0x71, 0x2c,
	0xb8, 0xcb, 0xc5, 0x98, 0x3a, 0xb3, 0x44, 0xa4, 0x02, 0x9b, 0x1a, 0x6a, 0x1f, 0x86, 0x22, 0x14,
	0x0a, 0x72, 0xb3, 0x49, 0xb3, 0xf6, 0x10, 0xca, 0x43, 0x31, 0xa6, 0xb8, 0x0d, 0x16, 0xe5, 0xe3,
	0x99, 0x60, 0x3c, 0x6d, 0xa1, 0x0e, 0xea, 0x56, 0xbc, 0x9f, 0x1d, 0xf7, 0xc0, 0x94, 0xa9, 0x9f,
	0xce, 0x65, 0x6b, 0xaf, 0x83, 0xba, 0x8d, 0x3e, 0x76, 0x74, 0xa4, 0x93, 0x39, 0x47, 0x8a, 0xf1,
	0x72, 0x85, 0xfd, 0x81, 0xc0, 0x1a, 0xd1, 0x68, 0xa2, 0x42, 0x3b, 0x50, 0xce, 0x8a, 0xa8, 0xc0,
	0x6a, 0xbf, 0xb6, 0x6b, 0xf3, 0x14, 0x83, 0x8f, 0xa0, 0xe2, 0x47, 0xd1, 0x53, 0x36, 0xeb, 0xf4,
	0xba, 0x67, 0xf9, 0x51, 0x94, 0x29, 0x24, 0x3e, 0x86, 0x9a, 0x1f, 0xa4, 0xec, 0x85, 0xe6, 0x7c,
	0x49, 0xf1, 0x55, 0x8d, 0x69, 0xc9, 0x29, 0x34, 0x18, 0xff, 0x23, 0x2a, 0x2b, 0x51, 0xbd, 0x40,
	0x95, 0xcc, 0x7e, 0x00, 0xeb, 0x36, 0x09, 0xb5, 0xa5, 0x0b, 0x66, 0xfc, 0x2a, 0x69, 0x34, 0xc9,
	0x6b, 0x35, 0x8b, 0x5a, 0x45, 0x6d, 0x2f, 0xe7, 0xb1, 0x0d, 0xfb, 0x45, 0xb1, 0xd2, 0xbf, 0xfe,
	0x9a, 0xea, 0x9d, 0x01, 0xfc, 0xfe, 0x02, 0xae, 0x81, 0x35, 0x18, 0x5e, 0x5e, 0xdf, 0x0d, 0xee,
	0x6f, 0x9a, 0x06, 0x06, 0x30, 0xf3, 0x19, 0x5d, 0xbd, 0x2d, 0xd7, 0xc4, 0x58, 0xad, 0x89, 0xb1,
	0xdc, 0x10, 0xb4, 0xda, 0x10, 0xf4, 0xb5, 0x21, 0xe8, 0x7d, 0x4b, 0x8c, 0xd5, 0x96, 0x18, 0x9f,
	0x5b, 0x62, 0xc0, 0x49, 0x20, 0x62, 0x67, 0x3a, 0xf7, 0x17, 0x94, 0x39, 0x0b, 0x46, 0x39, 0x4d,
	0x82, 0xa9, 0xcf, 0xb8, 0xbe, 0x53, 0xfe, 0xf4, 0xe3, 0x45, 0xc8, 0xd2, 0x42, 0x14, 0x88, 0xd8,
	0x9d, 0x09, 0x26, 0xa5, 0xe0, 0x92, 0xfa, 0x49, 0x30, 0x75, 0x77, 0x6c, 0xae, 0xbe, 0xb4, 0xb6,
	0x3d, 0x9b, 0x6a, 0x3b, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x64, 0xc0, 0x4f, 0x1f, 0x02,
	0x00, 0x00,
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelfNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelfNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelfNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InactiveNodes != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.InactiveNodes))
		i--
		dAtA[i] = 0x20
	}
	if m.ActiveNodes != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ActiveNodes))
		i--
		dAtA[i] = 0x18
	}
	if m.AllNodes != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.AllNodes))
		i--
		dAtA[i] = 0x10
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrgNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrgNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrgNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Myself != nil {
		{
			size, err := m.Myself.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovNode(uint64(m.Status))
	}
	return n
}

func (m *SelfNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.AllNodes != 0 {
		n += 1 + sovNode(uint64(m.AllNodes))
	}
	if m.ActiveNodes != 0 {
		n += 1 + sovNode(uint64(m.ActiveNodes))
	}
	if m.InactiveNodes != 0 {
		n += 1 + sovNode(uint64(m.InactiveNodes))
	}
	return n
}

func (m *OrgNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NodeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelfNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllNodes", wireType)
			}
			m.AllNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNodes", wireType)
			}
			m.ActiveNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveNodes", wireType)
			}
			m.InactiveNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InactiveNodes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrgNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrgNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrgNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &SelfNode{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
