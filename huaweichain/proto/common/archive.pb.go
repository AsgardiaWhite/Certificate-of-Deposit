// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/archive.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Snapshot struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{0}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

type Storage struct {
	ChainId    string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CheckPoint uint64 `protobuf:"varint,2,opt,name=check_point,json=checkPoint,proto3" json:"check_point,omitempty"`
	// Types that are valid to be assigned to StorageOp:
	//	*Storage_Obs_
	//	*Storage_File_
	StorageOp isStorage_StorageOp `protobuf_oneof:"storageOp"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{1}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return m.Size()
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

type isStorage_StorageOp interface {
	isStorage_StorageOp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Storage_Obs_ struct {
	Obs *Storage_Obs `protobuf:"bytes,4,opt,name=obs,proto3,oneof" json:"obs,omitempty"`
}
type Storage_File_ struct {
	File *Storage_File `protobuf:"bytes,5,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

func (*Storage_Obs_) isStorage_StorageOp()  {}
func (*Storage_File_) isStorage_StorageOp() {}

func (m *Storage) GetStorageOp() isStorage_StorageOp {
	if m != nil {
		return m.StorageOp
	}
	return nil
}

func (m *Storage) GetObs() *Storage_Obs {
	if x, ok := m.GetStorageOp().(*Storage_Obs_); ok {
		return x.Obs
	}
	return nil
}

func (m *Storage) GetFile() *Storage_File {
	if x, ok := m.GetStorageOp().(*Storage_File_); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Storage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Storage_Obs_)(nil),
		(*Storage_File_)(nil),
	}
}

type Storage_Obs struct {
}

func (m *Storage_Obs) Reset()         { *m = Storage_Obs{} }
func (m *Storage_Obs) String() string { return proto.CompactTextString(m) }
func (*Storage_Obs) ProtoMessage()    {}
func (*Storage_Obs) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{1, 0}
}
func (m *Storage_Obs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage_Obs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage_Obs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage_Obs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage_Obs.Merge(m, src)
}
func (m *Storage_Obs) XXX_Size() int {
	return m.Size()
}
func (m *Storage_Obs) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage_Obs.DiscardUnknown(m)
}

var xxx_messageInfo_Storage_Obs proto.InternalMessageInfo

type Storage_File struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *Storage_File) Reset()         { *m = Storage_File{} }
func (m *Storage_File) String() string { return proto.CompactTextString(m) }
func (*Storage_File) ProtoMessage()    {}
func (*Storage_File) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{1, 1}
}
func (m *Storage_File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage_File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage_File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage_File.Merge(m, src)
}
func (m *Storage_File) XXX_Size() int {
	return m.Size()
}
func (m *Storage_File) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage_File.DiscardUnknown(m)
}

var xxx_messageInfo_Storage_File proto.InternalMessageInfo

type ArchiveOp struct {
	// Types that are valid to be assigned to Op:
	//	*ArchiveOp_Snapshot
	//	*ArchiveOp_Storage
	Op isArchiveOp_Op `protobuf_oneof:"op"`
}

func (m *ArchiveOp) Reset()         { *m = ArchiveOp{} }
func (m *ArchiveOp) String() string { return proto.CompactTextString(m) }
func (*ArchiveOp) ProtoMessage()    {}
func (*ArchiveOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{2}
}
func (m *ArchiveOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveOp.Merge(m, src)
}
func (m *ArchiveOp) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveOp.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveOp proto.InternalMessageInfo

type isArchiveOp_Op interface {
	isArchiveOp_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ArchiveOp_Snapshot struct {
	Snapshot *Snapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
}
type ArchiveOp_Storage struct {
	Storage *Storage `protobuf:"bytes,2,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
}

func (*ArchiveOp_Snapshot) isArchiveOp_Op() {}
func (*ArchiveOp_Storage) isArchiveOp_Op()  {}

func (m *ArchiveOp) GetOp() isArchiveOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *ArchiveOp) GetSnapshot() *Snapshot {
	if x, ok := m.GetOp().(*ArchiveOp_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (m *ArchiveOp) GetStorage() *Storage {
	if x, ok := m.GetOp().(*ArchiveOp_Storage); ok {
		return x.Storage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArchiveOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArchiveOp_Snapshot)(nil),
		(*ArchiveOp_Storage)(nil),
	}
}

type ArchiveCheckPoints struct {
	CpArray []uint64 `protobuf:"varint,1,rep,packed,name=cp_array,json=cpArray,proto3" json:"cp_array,omitempty"`
}

func (m *ArchiveCheckPoints) Reset()         { *m = ArchiveCheckPoints{} }
func (m *ArchiveCheckPoints) String() string { return proto.CompactTextString(m) }
func (*ArchiveCheckPoints) ProtoMessage()    {}
func (*ArchiveCheckPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{3}
}
func (m *ArchiveCheckPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveCheckPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveCheckPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveCheckPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveCheckPoints.Merge(m, src)
}
func (m *ArchiveCheckPoints) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveCheckPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveCheckPoints.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveCheckPoints proto.InternalMessageInfo

type SnapshotMetadata struct {
	LastArchivedNumber  uint64            `protobuf:"varint,1,opt,name=lastArchivedNumber,proto3" json:"lastArchivedNumber,omitempty"`
	LastArchivedFileNum int32             `protobuf:"varint,2,opt,name=lastArchivedFileNum,proto3" json:"lastArchivedFileNum,omitempty"`
	LastBlockNumber     uint64            `protobuf:"varint,3,opt,name=lastBlockNumber,proto3" json:"lastBlockNumber,omitempty"`
	FilesAndHashes      map[string][]byte `protobuf:"bytes,4,rep,name=filesAndHashes,proto3" json:"filesAndHashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SnapshotMetadata) Reset()         { *m = SnapshotMetadata{} }
func (m *SnapshotMetadata) String() string { return proto.CompactTextString(m) }
func (*SnapshotMetadata) ProtoMessage()    {}
func (*SnapshotMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{4}
}
func (m *SnapshotMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMetadata.Merge(m, src)
}
func (m *SnapshotMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMetadata proto.InternalMessageInfo

type ArchiveConfigData struct {
	Config *ConfigInfo `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ArchiveConfigData) Reset()         { *m = ArchiveConfigData{} }
func (m *ArchiveConfigData) String() string { return proto.CompactTextString(m) }
func (*ArchiveConfigData) ProtoMessage()    {}
func (*ArchiveConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{5}
}
func (m *ArchiveConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveConfigData.Merge(m, src)
}
func (m *ArchiveConfigData) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveConfigData proto.InternalMessageInfo

type ArchiveStateMetadata struct {
	Metadata []*MetadataRow `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ArchiveStateMetadata) Reset()         { *m = ArchiveStateMetadata{} }
func (m *ArchiveStateMetadata) String() string { return proto.CompactTextString(m) }
func (*ArchiveStateMetadata) ProtoMessage()    {}
func (*ArchiveStateMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{6}
}
func (m *ArchiveStateMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveStateMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveStateMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveStateMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveStateMetadata.Merge(m, src)
}
func (m *ArchiveStateMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveStateMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveStateMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveStateMetadata proto.InternalMessageInfo

type MetadataRow struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	KvCounts  uint64 `protobuf:"varint,2,opt,name=kvCounts,proto3" json:"kvCounts,omitempty"`
}

func (m *MetadataRow) Reset()         { *m = MetadataRow{} }
func (m *MetadataRow) String() string { return proto.CompactTextString(m) }
func (*MetadataRow) ProtoMessage()    {}
func (*MetadataRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{7}
}
func (m *MetadataRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataRow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataRow.Merge(m, src)
}
func (m *MetadataRow) XXX_Size() int {
	return m.Size()
}
func (m *MetadataRow) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataRow.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataRow proto.InternalMessageInfo

type ArchiveBlockFile struct {
	FileNum uint64 `protobuf:"varint,1,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
}

func (m *ArchiveBlockFile) Reset()         { *m = ArchiveBlockFile{} }
func (m *ArchiveBlockFile) String() string { return proto.CompactTextString(m) }
func (*ArchiveBlockFile) ProtoMessage()    {}
func (*ArchiveBlockFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_985451d3b3af381b, []int{8}
}
func (m *ArchiveBlockFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveBlockFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveBlockFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveBlockFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveBlockFile.Merge(m, src)
}
func (m *ArchiveBlockFile) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveBlockFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveBlockFile.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveBlockFile proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Snapshot)(nil), "common.Snapshot")
	proto.RegisterType((*Storage)(nil), "common.Storage")
	proto.RegisterType((*Storage_Obs)(nil), "common.Storage.Obs")
	proto.RegisterType((*Storage_File)(nil), "common.Storage.File")
	proto.RegisterType((*ArchiveOp)(nil), "common.ArchiveOp")
	proto.RegisterType((*ArchiveCheckPoints)(nil), "common.ArchiveCheckPoints")
	proto.RegisterType((*SnapshotMetadata)(nil), "common.SnapshotMetadata")
	proto.RegisterMapType((map[string][]byte)(nil), "common.SnapshotMetadata.FilesAndHashesEntry")
	proto.RegisterType((*ArchiveConfigData)(nil), "common.ArchiveConfigData")
	proto.RegisterType((*ArchiveStateMetadata)(nil), "common.ArchiveStateMetadata")
	proto.RegisterType((*MetadataRow)(nil), "common.MetadataRow")
	proto.RegisterType((*ArchiveBlockFile)(nil), "common.ArchiveBlockFile")
}

func init() { proto.RegisterFile("common/archive.proto", fileDescriptor_985451d3b3af381b) }

var fileDescriptor_985451d3b3af381b = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x4e, 0xda, 0x74, 0x6d, 0x5f, 0x11, 0x2b, 0x5e, 0x0f, 0x5d, 0x84, 0x42, 0x15, 0x84, 0xa8,
	0x06, 0x24, 0xa8, 0x08, 0x09, 0x71, 0x41, 0xed, 0x80, 0x75, 0x07, 0x56, 0xe4, 0x71, 0xe2, 0x52,
	0xb9, 0xa9, 0xdb, 0x44, 0x6d, 0xec, 0x28, 0x4e, 0x37, 0x4d, 0xe2, 0x47, 0xf0, 0x6f, 0xf8, 0x0b,
	0x13, 0xa7, 0x1d, 0x39, 0xb2, 0xed, 0x8f, 0xa0, 0xd8, 0x4e, 0x57, 0x55, 0x13, 0x37, 0xbf, 0xef,
	0x7d, 0x7e, 0xfe, 0xfc, 0xbd, 0x67, 0x43, 0x2b, 0xe0, 0x71, 0xcc, 0x99, 0x4f, 0xd2, 0x20, 0x8c,
	0xce, 0xa8, 0x97, 0xa4, 0x3c, 0xe3, 0x68, 0x47, 0xa1, 0x76, 0x6b, 0xce, 0xe7, 0x5c, 0x42, 0x7e,
	0xbe, 0x52, 0x59, 0x7b, 0x5f, 0xef, 0x09, 0x42, 0x12, 0xb1, 0x71, 0xc0, 0xd9, 0x2c, 0x9a, 0xab,
	0x94, 0xfb, 0x0c, 0x6a, 0xa7, 0x8c, 0x24, 0x22, 0xe4, 0x19, 0xda, 0x87, 0x9a, 0x62, 0x44, 0xd3,
	0xb6, 0xd9, 0x31, 0xbb, 0x75, 0x5c, 0x95, 0xf1, 0xf1, 0xd4, 0xfd, 0x6d, 0x42, 0xf5, 0x34, 0xe3,
	0x29, 0x99, 0xd3, 0xff, 0xd0, 0xd0, 0x13, 0x68, 0x04, 0x21, 0x0d, 0x16, 0xe3, 0x84, 0x47, 0x2c,
	0x6b, 0x97, 0x3a, 0x66, 0xd7, 0xc2, 0x20, 0xa1, 0xaf, 0x39, 0x82, 0x9e, 0x43, 0x99, 0x4f, 0x44,
	0xdb, 0xea, 0x98, 0xdd, 0x46, 0x6f, 0xcf, 0x53, 0xba, 0x3c, 0x5d, 0xd9, 0x1b, 0x4d, 0xc4, 0xd0,
	0xc0, 0x39, 0x03, 0x1d, 0x80, 0x35, 0x8b, 0x96, 0xb4, 0x5d, 0x91, 0xcc, 0xd6, 0x36, 0xf3, 0x73,
	0xb4, 0xa4, 0x43, 0x03, 0x4b, 0x8e, 0x5d, 0x81, 0xf2, 0x68, 0x22, 0x6c, 0x1b, 0xac, 0x1c, 0x46,
	0x08, 0xac, 0x84, 0x64, 0x61, 0xbb, 0x2c, 0xb5, 0xc9, 0xf5, 0xa0, 0x01, 0x75, 0xa1, 0xb6, 0x8e,
	0x12, 0x97, 0x41, 0xbd, 0xaf, 0xdc, 0x1b, 0x25, 0xc8, 0x83, 0x9a, 0xd0, 0x06, 0xc8, 0xdb, 0x34,
	0x7a, 0xcd, 0xf5, 0x61, 0x1a, 0x1f, 0x1a, 0x78, 0xcd, 0x41, 0x2f, 0xa0, 0xaa, 0x2b, 0xc9, 0xeb,
	0x35, 0x7a, 0xbb, 0x5b, 0xda, 0x86, 0x06, 0x2e, 0x18, 0x03, 0x0b, 0x4a, 0x3c, 0x71, 0x7d, 0x40,
	0xfa, 0xbc, 0xc3, 0xb5, 0x13, 0x42, 0xda, 0x98, 0x8c, 0x49, 0x9a, 0x92, 0x8b, 0xb6, 0xd9, 0x29,
	0x77, 0x2d, 0x5c, 0x0d, 0x92, 0x7e, 0x1e, 0xba, 0xbf, 0x4a, 0xd0, 0x2c, 0x0e, 0xff, 0x42, 0x33,
	0x32, 0x25, 0x19, 0x41, 0x1e, 0xa0, 0x25, 0x11, 0x99, 0xae, 0x34, 0x3d, 0x59, 0xc5, 0x13, 0x9a,
	0x4a, 0xc9, 0x16, 0xbe, 0x27, 0x83, 0x5e, 0xc3, 0xde, 0x26, 0x9a, 0x5b, 0x73, 0xb2, 0x8a, 0xa5,
	0xe8, 0x0a, 0xbe, 0x2f, 0x85, 0xba, 0xb0, 0x9b, 0xc3, 0x83, 0x25, 0x0f, 0x16, 0xba, 0x7c, 0x59,
	0x96, 0xdf, 0x86, 0xd1, 0x37, 0x78, 0x98, 0x3b, 0x2f, 0xfa, 0x6c, 0x3a, 0x24, 0x22, 0xa4, 0x79,
	0x47, 0xcb, 0xdd, 0x46, 0xef, 0xe5, 0xb6, 0x75, 0x85, 0x7a, 0xd9, 0xb0, 0x3b, 0xfa, 0x27, 0x96,
	0xa5, 0x17, 0x78, 0xab, 0x86, 0xdd, 0x87, 0xbd, 0x7b, 0x68, 0xa8, 0x09, 0xe5, 0x05, 0xbd, 0xd0,
	0xa3, 0x96, 0x2f, 0x51, 0x0b, 0x2a, 0x67, 0x64, 0xb9, 0x52, 0x1d, 0x78, 0x80, 0x55, 0xf0, 0xbe,
	0xf4, 0xce, 0x74, 0x3f, 0xc0, 0xa3, 0xc2, 0x6a, 0x39, 0xe5, 0x1f, 0x73, 0xe7, 0x0e, 0x60, 0x47,
	0xcd, 0xbc, 0x6e, 0x30, 0x2a, 0x54, 0x2a, 0xce, 0x31, 0x9b, 0x71, 0xac, 0x19, 0xee, 0x11, 0xb4,
	0x74, 0x81, 0xd3, 0x8c, 0x64, 0x74, 0xed, 0xbe, 0x0f, 0xb5, 0x58, 0xaf, 0x65, 0xb7, 0x36, 0xa6,
	0xb7, 0xe0, 0x60, 0x7e, 0x8e, 0xd7, 0x24, 0xf7, 0x08, 0x1a, 0x1b, 0x09, 0xf4, 0x18, 0xea, 0x8c,
	0xc4, 0x54, 0x24, 0x24, 0xa0, 0xfa, 0x2a, 0x77, 0x00, 0xb2, 0xa1, 0xb6, 0x38, 0x3b, 0xe4, 0x2b,
	0x96, 0x09, 0xfd, 0x68, 0xd6, 0xb1, 0xfb, 0x0a, 0x9a, 0x5a, 0x91, 0xec, 0x80, 0x1c, 0xf1, 0x7d,
	0xa8, 0xe5, 0xde, 0x8d, 0xd9, 0x2a, 0xd6, 0x13, 0x50, 0x9d, 0xa9, 0x26, 0x0e, 0x7e, 0x5c, 0x5e,
	0x3b, 0xc6, 0xd5, 0xb5, 0x63, 0x5c, 0xde, 0x38, 0xe6, 0xd5, 0x8d, 0x63, 0xfe, 0xbd, 0x71, 0xcc,
	0x9f, 0xb7, 0x8e, 0x71, 0x75, 0xeb, 0x18, 0x7f, 0x6e, 0x1d, 0x03, 0x9e, 0x06, 0x3c, 0xf6, 0xc2,
	0x15, 0x39, 0xa7, 0x91, 0x77, 0x1e, 0x51, 0x46, 0x53, 0xf9, 0x7c, 0xd5, 0x87, 0xa0, 0x2f, 0xf5,
	0xfd, 0xed, 0x3c, 0xca, 0x0a, 0x52, 0xc0, 0x63, 0x3f, 0xe1, 0x91, 0x10, 0x9c, 0x09, 0x9a, 0xff,
	0x3b, 0xfe, 0xc6, 0x36, 0x5f, 0xfd, 0x36, 0x6a, 0xdb, 0x64, 0x47, 0x46, 0x6f, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x38, 0x4b, 0x26, 0xde, 0xa6, 0x04, 0x00, 0x00,
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Storage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageOp != nil {
		{
			size := m.StorageOp.Size()
			i -= size
			if _, err := m.StorageOp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CheckPoint != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.CheckPoint))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Storage_Obs_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage_Obs_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Obs != nil {
		{
			size, err := m.Obs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArchive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Storage_File_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage_File_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArchive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Storage_Obs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage_Obs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage_Obs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Storage_File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		{
			size := m.Op.Size()
			i -= size
			if _, err := m.Op.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveOp_Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveOp_Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArchive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ArchiveOp_Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveOp_Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Storage != nil {
		{
			size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArchive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ArchiveCheckPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveCheckPoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveCheckPoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CpArray) > 0 {
		dAtA6 := make([]byte, len(m.CpArray)*10)
		var j5 int
		for _, num := range m.CpArray {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintArchive(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilesAndHashes) > 0 {
		for k := range m.FilesAndHashes {
			v := m.FilesAndHashes[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintArchive(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintArchive(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintArchive(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastBlockNumber != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.LastBlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.LastArchivedFileNum != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.LastArchivedFileNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LastArchivedNumber != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.LastArchivedNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveConfigData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveConfigData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArchive(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveStateMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveStateMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveStateMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArchive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetadataRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataRow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetadataRow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KvCounts != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.KvCounts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveBlockFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveBlockFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveBlockFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileNum != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.FileNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArchive(dAtA []byte, offset int, v uint64) int {
	offset -= sovArchive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}

func (m *Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.CheckPoint != 0 {
		n += 1 + sovArchive(uint64(m.CheckPoint))
	}
	if m.StorageOp != nil {
		n += m.StorageOp.Size()
	}
	return n
}

func (m *Storage_Obs_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Obs != nil {
		l = m.Obs.Size()
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}
func (m *Storage_File_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}
func (m *Storage_Obs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Storage_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}

func (m *ArchiveOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	return n
}

func (m *ArchiveOp_Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}
func (m *ArchiveOp_Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Storage != nil {
		l = m.Storage.Size()
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}
func (m *ArchiveCheckPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CpArray) > 0 {
		l = 0
		for _, e := range m.CpArray {
			l += sovArchive(uint64(e))
		}
		n += 1 + sovArchive(uint64(l)) + l
	}
	return n
}

func (m *SnapshotMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastArchivedNumber != 0 {
		n += 1 + sovArchive(uint64(m.LastArchivedNumber))
	}
	if m.LastArchivedFileNum != 0 {
		n += 1 + sovArchive(uint64(m.LastArchivedFileNum))
	}
	if m.LastBlockNumber != 0 {
		n += 1 + sovArchive(uint64(m.LastBlockNumber))
	}
	if len(m.FilesAndHashes) > 0 {
		for k, v := range m.FilesAndHashes {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovArchive(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovArchive(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovArchive(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ArchiveConfigData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovArchive(uint64(l))
	}
	return n
}

func (m *ArchiveStateMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovArchive(uint64(l))
		}
	}
	return n
}

func (m *MetadataRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.KvCounts != 0 {
		n += 1 + sovArchive(uint64(m.KvCounts))
	}
	return n
}

func (m *ArchiveBlockFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileNum != 0 {
		n += 1 + sovArchive(uint64(m.FileNum))
	}
	return n
}

func sovArchive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArchive(x uint64) (n int) {
	return sovArchive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Storage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Storage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Storage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPoint", wireType)
			}
			m.CheckPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckPoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Storage_Obs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageOp = &Storage_Obs_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Storage_File{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StorageOp = &Storage_File_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Storage_Obs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Obs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Obs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Storage_File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Snapshot{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ArchiveOp_Snapshot{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Storage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ArchiveOp_Storage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveCheckPoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveCheckPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveCheckPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArchive
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CpArray = append(m.CpArray, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArchive
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthArchive
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthArchive
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CpArray) == 0 {
					m.CpArray = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArchive
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CpArray = append(m.CpArray, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CpArray", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastArchivedNumber", wireType)
			}
			m.LastArchivedNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastArchivedNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastArchivedFileNum", wireType)
			}
			m.LastArchivedFileNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastArchivedFileNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockNumber", wireType)
			}
			m.LastBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesAndHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FilesAndHashes == nil {
				m.FilesAndHashes = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArchive
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArchive
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthArchive
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthArchive
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArchive
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthArchive
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthArchive
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipArchive(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthArchive
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FilesAndHashes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ConfigInfo{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveStateMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveStateMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveStateMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &MetadataRow{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvCounts", wireType)
			}
			m.KvCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KvCounts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveBlockFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveBlockFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveBlockFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNum", wireType)
			}
			m.FileNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArchive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArchive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArchive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArchive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArchive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArchive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArchive = fmt.Errorf("proto: unexpected end of group")
)
