// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/ledger.proto

package common

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StateUpdates struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are valid to be assigned to Updates:
	//	*StateUpdates_KvUpdates
	//	*StateUpdates_SqlUpdates
	Updates isStateUpdates_Updates `protobuf_oneof:"updates"`
}

func (m *StateUpdates) Reset()         { *m = StateUpdates{} }
func (m *StateUpdates) String() string { return proto.CompactTextString(m) }
func (*StateUpdates) ProtoMessage()    {}
func (*StateUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{0}
}
func (m *StateUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateUpdates.Merge(m, src)
}
func (m *StateUpdates) XXX_Size() int {
	return m.Size()
}
func (m *StateUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_StateUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_StateUpdates proto.InternalMessageInfo

type isStateUpdates_Updates interface {
	isStateUpdates_Updates()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StateUpdates_KvUpdates struct {
	KvUpdates *KvStateUpdates `protobuf:"bytes,2,opt,name=kvUpdates,proto3,oneof" json:"kvUpdates,omitempty"`
}
type StateUpdates_SqlUpdates struct {
	SqlUpdates *SqlStateUpdates `protobuf:"bytes,3,opt,name=sqlUpdates,proto3,oneof" json:"sqlUpdates,omitempty"`
}

func (*StateUpdates_KvUpdates) isStateUpdates_Updates()  {}
func (*StateUpdates_SqlUpdates) isStateUpdates_Updates() {}

func (m *StateUpdates) GetUpdates() isStateUpdates_Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *StateUpdates) GetKvUpdates() *KvStateUpdates {
	if x, ok := m.GetUpdates().(*StateUpdates_KvUpdates); ok {
		return x.KvUpdates
	}
	return nil
}

func (m *StateUpdates) GetSqlUpdates() *SqlStateUpdates {
	if x, ok := m.GetUpdates().(*StateUpdates_SqlUpdates); ok {
		return x.SqlUpdates
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StateUpdates) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StateUpdates_KvUpdates)(nil),
		(*StateUpdates_SqlUpdates)(nil),
	}
}

type KvStateUpdates struct {
	KeyVersions []*KeyVersion    `protobuf:"bytes,1,rep,name=key_versions,json=keyVersions,proto3" json:"key_versions,omitempty"`
	ItrInfos    []*IterationInfo `protobuf:"bytes,2,rep,name=itr_infos,json=itrInfos,proto3" json:"itr_infos,omitempty"`
	Updates     []*KeyValue      `protobuf:"bytes,3,rep,name=updates,proto3" json:"updates,omitempty"`
	Deletes     []string         `protobuf:"bytes,4,rep,name=deletes,proto3" json:"deletes,omitempty"`
}

func (m *KvStateUpdates) Reset()         { *m = KvStateUpdates{} }
func (m *KvStateUpdates) String() string { return proto.CompactTextString(m) }
func (*KvStateUpdates) ProtoMessage()    {}
func (*KvStateUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{1}
}
func (m *KvStateUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvStateUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvStateUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KvStateUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvStateUpdates.Merge(m, src)
}
func (m *KvStateUpdates) XXX_Size() int {
	return m.Size()
}
func (m *KvStateUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_KvStateUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_KvStateUpdates proto.InternalMessageInfo

type KeyValue struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{2}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

type KeyVersion struct {
	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Version *Version `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *KeyVersion) Reset()         { *m = KeyVersion{} }
func (m *KeyVersion) String() string { return proto.CompactTextString(m) }
func (*KeyVersion) ProtoMessage()    {}
func (*KeyVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{3}
}
func (m *KeyVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyVersion.Merge(m, src)
}
func (m *KeyVersion) XXX_Size() int {
	return m.Size()
}
func (m *KeyVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KeyVersion proto.InternalMessageInfo

type ValueVersion struct {
	Value      []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Version    *Version `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Signature  []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	IsCompress bool     `protobuf:"varint,4,opt,name=isCompress,proto3" json:"isCompress,omitempty"`
}

func (m *ValueVersion) Reset()         { *m = ValueVersion{} }
func (m *ValueVersion) String() string { return proto.CompactTextString(m) }
func (*ValueVersion) ProtoMessage()    {}
func (*ValueVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{4}
}
func (m *ValueVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueVersion.Merge(m, src)
}
func (m *ValueVersion) XXX_Size() int {
	return m.Size()
}
func (m *ValueVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueVersion.DiscardUnknown(m)
}

var xxx_messageInfo_ValueVersion proto.InternalMessageInfo

type Version struct {
	BlockNum uint64 `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	TxNum    int32  `protobuf:"varint,2,opt,name=tx_num,json=txNum,proto3" json:"tx_num,omitempty"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{5}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

type IterationInfo struct {
	StartKey  string      `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey    string      `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Inclusive bool        `protobuf:"varint,3,opt,name=inclusive,proto3" json:"inclusive,omitempty"`
	Tree      *MerkleTree `protobuf:"bytes,4,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (m *IterationInfo) Reset()         { *m = IterationInfo{} }
func (m *IterationInfo) String() string { return proto.CompactTextString(m) }
func (*IterationInfo) ProtoMessage()    {}
func (*IterationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{6}
}
func (m *IterationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IterationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IterationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IterationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IterationInfo.Merge(m, src)
}
func (m *IterationInfo) XXX_Size() int {
	return m.Size()
}
func (m *IterationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IterationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IterationInfo proto.InternalMessageInfo

type MerkleTree struct {
	Level int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Nodes [][]byte `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *MerkleTree) Reset()         { *m = MerkleTree{} }
func (m *MerkleTree) String() string { return proto.CompactTextString(m) }
func (*MerkleTree) ProtoMessage()    {}
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{7}
}
func (m *MerkleTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleTree.Merge(m, src)
}
func (m *MerkleTree) XXX_Size() int {
	return m.Size()
}
func (m *MerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleTree proto.InternalMessageInfo

type BlockPointer struct {
	FileNum int32 `protobuf:"varint,1,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	Offset  int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *BlockPointer) Reset()         { *m = BlockPointer{} }
func (m *BlockPointer) String() string { return proto.CompactTextString(m) }
func (*BlockPointer) ProtoMessage()    {}
func (*BlockPointer) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{8}
}
func (m *BlockPointer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPointer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPointer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockPointer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPointer.Merge(m, src)
}
func (m *BlockPointer) XXX_Size() int {
	return m.Size()
}
func (m *BlockPointer) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPointer.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPointer proto.InternalMessageInfo

type SqlStateUpdates struct {
	SelectStmts []*SelectStatement `protobuf:"bytes,1,rep,name=select_stmts,json=selectStmts,proto3" json:"select_stmts,omitempty"`
	InsertStmts []*InsertStatement `protobuf:"bytes,2,rep,name=insert_stmts,json=insertStmts,proto3" json:"insert_stmts,omitempty"`
}

func (m *SqlStateUpdates) Reset()         { *m = SqlStateUpdates{} }
func (m *SqlStateUpdates) String() string { return proto.CompactTextString(m) }
func (*SqlStateUpdates) ProtoMessage()    {}
func (*SqlStateUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{9}
}
func (m *SqlStateUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SqlStateUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SqlStateUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SqlStateUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqlStateUpdates.Merge(m, src)
}
func (m *SqlStateUpdates) XXX_Size() int {
	return m.Size()
}
func (m *SqlStateUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_SqlStateUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_SqlStateUpdates proto.InternalMessageInfo

// if numOfRows is 0, it means all rows of the select statement.
type SelectStatement struct {
	Query     string           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Args      *PrimitiveValues `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Tree      *MerkleTree      `protobuf:"bytes,3,opt,name=tree,proto3" json:"tree,omitempty"`
	NumOfRows uint64           `protobuf:"varint,4,opt,name=numOfRows,proto3" json:"numOfRows,omitempty"`
}

func (m *SelectStatement) Reset()         { *m = SelectStatement{} }
func (m *SelectStatement) String() string { return proto.CompactTextString(m) }
func (*SelectStatement) ProtoMessage()    {}
func (*SelectStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{10}
}
func (m *SelectStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectStatement.Merge(m, src)
}
func (m *SelectStatement) XXX_Size() int {
	return m.Size()
}
func (m *SelectStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectStatement.DiscardUnknown(m)
}

var xxx_messageInfo_SelectStatement proto.InternalMessageInfo

type InsertStatement struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns   []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Types that are valid to be assigned to Values:
	//	*InsertStatement_InsertValues
	//	*InsertStatement_SelectRows
	Values   isInsertStatement_Values `protobuf_oneof:"values"`
	IsDelete bool                     `protobuf:"varint,5,opt,name=isDelete,proto3" json:"isDelete,omitempty"`
}

func (m *InsertStatement) Reset()         { *m = InsertStatement{} }
func (m *InsertStatement) String() string { return proto.CompactTextString(m) }
func (*InsertStatement) ProtoMessage()    {}
func (*InsertStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{11}
}
func (m *InsertStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertStatement.Merge(m, src)
}
func (m *InsertStatement) XXX_Size() int {
	return m.Size()
}
func (m *InsertStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertStatement.DiscardUnknown(m)
}

var xxx_messageInfo_InsertStatement proto.InternalMessageInfo

type isInsertStatement_Values interface {
	isInsertStatement_Values()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InsertStatement_InsertValues struct {
	InsertValues *InsertValues `protobuf:"bytes,3,opt,name=insert_values,json=insertValues,proto3,oneof" json:"insert_values,omitempty"`
}
type InsertStatement_SelectRows struct {
	SelectRows *SelectStatement `protobuf:"bytes,4,opt,name=select_rows,json=selectRows,proto3,oneof" json:"select_rows,omitempty"`
}

func (*InsertStatement_InsertValues) isInsertStatement_Values() {}
func (*InsertStatement_SelectRows) isInsertStatement_Values()   {}

func (m *InsertStatement) GetValues() isInsertStatement_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *InsertStatement) GetInsertValues() *InsertValues {
	if x, ok := m.GetValues().(*InsertStatement_InsertValues); ok {
		return x.InsertValues
	}
	return nil
}

func (m *InsertStatement) GetSelectRows() *SelectStatement {
	if x, ok := m.GetValues().(*InsertStatement_SelectRows); ok {
		return x.SelectRows
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InsertStatement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InsertStatement_InsertValues)(nil),
		(*InsertStatement_SelectRows)(nil),
	}
}

type InsertValues struct {
	ValueTuples []*ValueTuple `protobuf:"bytes,1,rep,name=valueTuples,proto3" json:"valueTuples,omitempty"`
}

func (m *InsertValues) Reset()         { *m = InsertValues{} }
func (m *InsertValues) String() string { return proto.CompactTextString(m) }
func (*InsertValues) ProtoMessage()    {}
func (*InsertValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{12}
}
func (m *InsertValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertValues.Merge(m, src)
}
func (m *InsertValues) XXX_Size() int {
	return m.Size()
}
func (m *InsertValues) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertValues.DiscardUnknown(m)
}

var xxx_messageInfo_InsertValues proto.InternalMessageInfo

type ValueTuple struct {
	ValueExprs []*ValueExpr `protobuf:"bytes,1,rep,name=valueExprs,proto3" json:"valueExprs,omitempty"`
}

func (m *ValueTuple) Reset()         { *m = ValueTuple{} }
func (m *ValueTuple) String() string { return proto.CompactTextString(m) }
func (*ValueTuple) ProtoMessage()    {}
func (*ValueTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{13}
}
func (m *ValueTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueTuple.Merge(m, src)
}
func (m *ValueTuple) XXX_Size() int {
	return m.Size()
}
func (m *ValueTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueTuple.DiscardUnknown(m)
}

var xxx_messageInfo_ValueTuple proto.InternalMessageInfo

type ValueExpr struct {
	Expr string           `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Args *PrimitiveValues `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *ValueExpr) Reset()         { *m = ValueExpr{} }
func (m *ValueExpr) String() string { return proto.CompactTextString(m) }
func (*ValueExpr) ProtoMessage()    {}
func (*ValueExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{14}
}
func (m *ValueExpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueExpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueExpr.Merge(m, src)
}
func (m *ValueExpr) XXX_Size() int {
	return m.Size()
}
func (m *ValueExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueExpr.DiscardUnknown(m)
}

var xxx_messageInfo_ValueExpr proto.InternalMessageInfo

type PrimitiveValues struct {
	Values []*PrimitiveValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *PrimitiveValues) Reset()         { *m = PrimitiveValues{} }
func (m *PrimitiveValues) String() string { return proto.CompactTextString(m) }
func (*PrimitiveValues) ProtoMessage()    {}
func (*PrimitiveValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{15}
}
func (m *PrimitiveValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveValues.Merge(m, src)
}
func (m *PrimitiveValues) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveValues) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveValues.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveValues proto.InternalMessageInfo

type PrimitiveValue struct {
	// Types that are valid to be assigned to Value:
	//	*PrimitiveValue_DoubleValue
	//	*PrimitiveValue_FloatValue
	//	*PrimitiveValue_Int32Value
	//	*PrimitiveValue_Int64Value
	//	*PrimitiveValue_Uint32Value
	//	*PrimitiveValue_Uint64Value
	//	*PrimitiveValue_BoolValue
	//	*PrimitiveValue_StringValue
	//	*PrimitiveValue_BytesValue
	//	*PrimitiveValue_TimeValue
	Value isPrimitiveValue_Value `protobuf_oneof:"value"`
}

func (m *PrimitiveValue) Reset()         { *m = PrimitiveValue{} }
func (m *PrimitiveValue) String() string { return proto.CompactTextString(m) }
func (*PrimitiveValue) ProtoMessage()    {}
func (*PrimitiveValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_da3410306adbea27, []int{16}
}
func (m *PrimitiveValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveValue.Merge(m, src)
}
func (m *PrimitiveValue) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveValue.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveValue proto.InternalMessageInfo

type isPrimitiveValue_Value interface {
	isPrimitiveValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimitiveValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type PrimitiveValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof" json:"float_value,omitempty"`
}
type PrimitiveValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
}
type PrimitiveValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type PrimitiveValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof" json:"uint32_value,omitempty"`
}
type PrimitiveValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof" json:"uint64_value,omitempty"`
}
type PrimitiveValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type PrimitiveValue_StringValue struct {
	StringValue string `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type PrimitiveValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,9,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
}
type PrimitiveValue_TimeValue struct {
	TimeValue *types.Timestamp `protobuf:"bytes,10,opt,name=time_value,json=timeValue,proto3,oneof" json:"time_value,omitempty"`
}

func (*PrimitiveValue_DoubleValue) isPrimitiveValue_Value() {}
func (*PrimitiveValue_FloatValue) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_Int32Value) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_Int64Value) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_Uint32Value) isPrimitiveValue_Value() {}
func (*PrimitiveValue_Uint64Value) isPrimitiveValue_Value() {}
func (*PrimitiveValue_BoolValue) isPrimitiveValue_Value()   {}
func (*PrimitiveValue_StringValue) isPrimitiveValue_Value() {}
func (*PrimitiveValue_BytesValue) isPrimitiveValue_Value()  {}
func (*PrimitiveValue_TimeValue) isPrimitiveValue_Value()   {}

func (m *PrimitiveValue) GetValue() isPrimitiveValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PrimitiveValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*PrimitiveValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *PrimitiveValue) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*PrimitiveValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *PrimitiveValue) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*PrimitiveValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *PrimitiveValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*PrimitiveValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *PrimitiveValue) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*PrimitiveValue_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *PrimitiveValue) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*PrimitiveValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *PrimitiveValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*PrimitiveValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *PrimitiveValue) GetStringValue() string {
	if x, ok := m.GetValue().(*PrimitiveValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *PrimitiveValue) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*PrimitiveValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *PrimitiveValue) GetTimeValue() *types.Timestamp {
	if x, ok := m.GetValue().(*PrimitiveValue_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrimitiveValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrimitiveValue_DoubleValue)(nil),
		(*PrimitiveValue_FloatValue)(nil),
		(*PrimitiveValue_Int32Value)(nil),
		(*PrimitiveValue_Int64Value)(nil),
		(*PrimitiveValue_Uint32Value)(nil),
		(*PrimitiveValue_Uint64Value)(nil),
		(*PrimitiveValue_BoolValue)(nil),
		(*PrimitiveValue_StringValue)(nil),
		(*PrimitiveValue_BytesValue)(nil),
		(*PrimitiveValue_TimeValue)(nil),
	}
}

func init() {
	proto.RegisterType((*StateUpdates)(nil), "common.StateUpdates")
	proto.RegisterType((*KvStateUpdates)(nil), "common.KvStateUpdates")
	proto.RegisterType((*KeyValue)(nil), "common.KeyValue")
	proto.RegisterType((*KeyVersion)(nil), "common.KeyVersion")
	proto.RegisterType((*ValueVersion)(nil), "common.ValueVersion")
	proto.RegisterType((*Version)(nil), "common.Version")
	proto.RegisterType((*IterationInfo)(nil), "common.IterationInfo")
	proto.RegisterType((*MerkleTree)(nil), "common.MerkleTree")
	proto.RegisterType((*BlockPointer)(nil), "common.BlockPointer")
	proto.RegisterType((*SqlStateUpdates)(nil), "common.SqlStateUpdates")
	proto.RegisterType((*SelectStatement)(nil), "common.SelectStatement")
	proto.RegisterType((*InsertStatement)(nil), "common.InsertStatement")
	proto.RegisterType((*InsertValues)(nil), "common.InsertValues")
	proto.RegisterType((*ValueTuple)(nil), "common.ValueTuple")
	proto.RegisterType((*ValueExpr)(nil), "common.ValueExpr")
	proto.RegisterType((*PrimitiveValues)(nil), "common.PrimitiveValues")
	proto.RegisterType((*PrimitiveValue)(nil), "common.PrimitiveValue")
}

func init() { proto.RegisterFile("common/ledger.proto", fileDescriptor_da3410306adbea27) }

var fileDescriptor_da3410306adbea27 = []byte{
	// 1103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0xff, 0x9f, 0x9d, 0xa6, 0x0c, 0x69, 0x6a, 0x42, 0x71, 0xc3, 0x56, 0x42, 0x01,
	0x24, 0x5b, 0xa4, 0x69, 0x04, 0xad, 0x10, 0x6a, 0x28, 0x52, 0xa2, 0x42, 0x88, 0xa6, 0xa1, 0x07,
	0x2e, 0xd6, 0xda, 0x7e, 0x76, 0x46, 0xde, 0xdd, 0x71, 0x76, 0x66, 0x9d, 0x44, 0xe2, 0x0b, 0x20,
	0x84, 0xc4, 0x0d, 0x89, 0x8f, 0xc0, 0xb7, 0xe0, 0xd6, 0x63, 0x8e, 0x1c, 0x69, 0x72, 0xe2, 0x5b,
	0xa0, 0xf9, 0xb7, 0x5e, 0x87, 0x52, 0xd1, 0xdb, 0xbc, 0xdf, 0xfb, 0xbd, 0xb7, 0xbf, 0x79, 0xef,
	0xcd, 0xec, 0xc0, 0xdb, 0x03, 0x1e, 0x45, 0x3c, 0xee, 0x86, 0x38, 0x1c, 0x63, 0xd2, 0x99, 0x26,
	0x5c, 0x72, 0x52, 0x31, 0xe0, 0xfa, 0xea, 0x98, 0x8f, 0xb9, 0x86, 0xba, 0x6a, 0x65, 0xbc, 0xeb,
	0x77, 0xc7, 0x9c, 0x8f, 0x43, 0xec, 0x6a, 0xab, 0x9f, 0x8e, 0xba, 0x92, 0x45, 0x28, 0x64, 0x10,
	0x4d, 0x0d, 0xc1, 0xff, 0xdd, 0x83, 0xe6, 0x33, 0x19, 0x48, 0xfc, 0x6e, 0x3a, 0x0c, 0x24, 0x0a,
	0x72, 0x07, 0xea, 0x71, 0x10, 0xa1, 0x98, 0x06, 0x03, 0x6c, 0x79, 0x1b, 0xde, 0x66, 0x9d, 0xce,
	0x01, 0xb2, 0x03, 0xf5, 0xc9, 0xcc, 0x52, 0x5b, 0x4b, 0x1b, 0xde, 0x66, 0x63, 0x6b, 0xad, 0x63,
	0x14, 0x74, 0x9e, 0xce, 0xf2, 0x89, 0xf6, 0x0a, 0x74, 0x4e, 0x25, 0x9f, 0x01, 0x88, 0x93, 0xd0,
	0x05, 0x16, 0x75, 0xe0, 0x6d, 0x17, 0xf8, 0xec, 0x24, 0xbc, 0x16, 0x99, 0x23, 0xef, 0xd6, 0xa1,
	0x9a, 0x9a, 0xa5, 0xff, 0x87, 0x07, 0x37, 0x16, 0xbf, 0x42, 0x1e, 0x40, 0x73, 0x82, 0xe7, 0xbd,
	0x19, 0x26, 0x82, 0xf1, 0x58, 0xb4, 0xbc, 0x8d, 0xe2, 0x66, 0x63, 0x8b, 0x64, 0x9a, 0xf0, 0xfc,
	0xb9, 0x71, 0xd1, 0xc6, 0x24, 0x5b, 0x0b, 0xb2, 0x05, 0x75, 0x26, 0x93, 0x1e, 0x8b, 0x47, 0x5c,
	0xed, 0x43, 0xc5, 0xdc, 0x72, 0x31, 0xfb, 0x12, 0x93, 0x40, 0x32, 0x1e, 0xef, 0xc7, 0x23, 0x4e,
	0x6b, 0x4c, 0x26, 0x6a, 0x21, 0xc8, 0x47, 0x99, 0x90, 0x56, 0x51, 0x47, 0xdc, 0xcc, 0x7f, 0x25,
	0x08, 0x53, 0xa4, 0x8e, 0x40, 0x5a, 0x50, 0x1d, 0x62, 0x88, 0x8a, 0x5b, 0xda, 0x28, 0x6e, 0xd6,
	0xa9, 0x33, 0xfd, 0x43, 0xa8, 0x39, 0x3a, 0xb9, 0x09, 0xc5, 0x09, 0x9e, 0xdb, 0x2a, 0xab, 0x25,
	0x59, 0x85, 0xf2, 0x4c, 0xb9, 0x74, 0x6d, 0x9b, 0xd4, 0x18, 0xaa, 0x27, 0x82, 0x8d, 0xe3, 0x40,
	0xa6, 0x09, 0xea, 0xe2, 0x35, 0xe9, 0x1c, 0xf0, 0xf7, 0x01, 0xe6, 0xdb, 0x7c, 0x45, 0xce, 0x0f,
	0xa1, 0x6a, 0xcb, 0x63, 0x3b, 0xb6, 0xe2, 0x74, 0xbb, 0xd2, 0x38, 0xbf, 0xff, 0xb3, 0x07, 0x4d,
	0x2d, 0xcd, 0x65, 0xcb, 0xf4, 0x78, 0x79, 0x3d, 0xff, 0x3f, 0xe3, 0xeb, 0xa5, 0x93, 0x36, 0x00,
	0x13, 0x5f, 0xf2, 0x68, 0x9a, 0xa0, 0x50, 0x95, 0xf2, 0x36, 0x6b, 0x34, 0x87, 0xf8, 0x9f, 0x43,
	0xd5, 0x29, 0x79, 0x17, 0xea, 0xfd, 0x90, 0x0f, 0x26, 0xbd, 0x38, 0x8d, 0xb4, 0x9a, 0x12, 0xad,
	0x69, 0xe0, 0x20, 0x8d, 0xc8, 0x2d, 0xa8, 0xc8, 0x33, 0xed, 0x51, 0x7a, 0xca, 0xb4, 0x2c, 0xcf,
	0x0e, 0xd2, 0xc8, 0xff, 0xc9, 0x83, 0xe5, 0x85, 0x6e, 0xaa, 0x2c, 0x42, 0x06, 0x89, 0xec, 0xcd,
	0x6b, 0x54, 0xd3, 0xc0, 0x53, 0x3c, 0x27, 0xb7, 0xa1, 0x8a, 0xf1, 0x50, 0xbb, 0x96, 0xb4, 0xab,
	0x82, 0xf1, 0x50, 0x39, 0xee, 0x40, 0x9d, 0xc5, 0x83, 0x30, 0x15, 0x6c, 0x66, 0x36, 0x51, 0xa3,
	0x73, 0x80, 0x7c, 0x00, 0x25, 0x99, 0x20, 0x6a, 0xf9, 0xb9, 0xd1, 0xfb, 0x06, 0x93, 0x49, 0x88,
	0x47, 0x09, 0x22, 0xd5, 0x7e, 0xff, 0x53, 0x80, 0x39, 0xa6, 0x2a, 0x1b, 0xe2, 0x0c, 0x43, 0xad,
	0xa2, 0x4c, 0x8d, 0xa1, 0xd0, 0x98, 0x0f, 0xd1, 0xcc, 0x64, 0x93, 0x1a, 0xc3, 0x7f, 0x0c, 0xcd,
	0x5d, 0xb5, 0xd5, 0x43, 0xce, 0x62, 0x89, 0x09, 0x79, 0x07, 0x6a, 0x23, 0x16, 0x62, 0x56, 0x8a,
	0x32, 0xad, 0x2a, 0x5b, 0x55, 0x62, 0x0d, 0x2a, 0x7c, 0x34, 0x12, 0x28, 0x6d, 0x25, 0xac, 0xe5,
	0xff, 0xe8, 0xc1, 0xca, 0xb5, 0x73, 0x46, 0x1e, 0x42, 0x53, 0x60, 0x88, 0x03, 0xd9, 0x13, 0x32,
	0x92, 0xee, 0xec, 0xcc, 0x8f, 0xa5, 0xf6, 0xe9, 0x88, 0x08, 0x63, 0x49, 0x1b, 0xc2, 0x02, 0x91,
	0xd4, 0xb1, 0x2c, 0x16, 0x98, 0xb8, 0xd8, 0xa5, 0xc5, 0xd8, 0x7d, 0xed, 0xcb, 0xc5, 0x32, 0x0b,
	0x44, 0x52, 0xf8, 0xbf, 0x29, 0x2d, 0x8b, 0xc9, 0xd5, 0xc6, 0x4f, 0x52, 0x4c, 0x5c, 0x53, 0x8c,
	0x41, 0x3e, 0x86, 0x52, 0x90, 0x8c, 0xdd, 0x4d, 0x93, 0x65, 0x3f, 0x4c, 0x58, 0xc4, 0x24, 0x9b,
	0xa1, 0x9e, 0x55, 0x41, 0x35, 0x29, 0xeb, 0x43, 0xf1, 0xf5, 0x7d, 0xd0, 0x37, 0x5c, 0x1a, 0x7d,
	0x3b, 0xa2, 0xfc, 0xd4, 0xcc, 0x5c, 0x89, 0xce, 0x01, 0xff, 0x6f, 0x0f, 0x56, 0xae, 0xa9, 0x27,
	0xef, 0x01, 0xc8, 0xa0, 0xaf, 0x0a, 0x1e, 0x44, 0xd9, 0xa5, 0xa8, 0x91, 0x83, 0x20, 0x42, 0x75,
	0xd8, 0x07, 0x3c, 0x4c, 0xa3, 0xd8, 0x94, 0xa1, 0x4e, 0x9d, 0x49, 0x1e, 0xc1, 0xb2, 0xad, 0x92,
	0x3e, 0x38, 0xee, 0xe6, 0x5b, 0x5d, 0x2c, 0x93, 0xd9, 0xc5, 0x5e, 0x81, 0xda, 0x92, 0x1a, 0x9b,
	0x3c, 0x04, 0x5b, 0xf1, 0x5e, 0xe2, 0x94, 0xfe, 0x77, 0x77, 0xf4, 0xa5, 0xa9, 0x21, 0xb5, 0x0b,
	0xb2, 0x0e, 0x35, 0x26, 0x9e, 0xe8, 0x2b, 0xa7, 0x55, 0xd6, 0x03, 0x9b, 0xd9, 0xbb, 0x35, 0xa8,
	0x18, 0x35, 0xfe, 0x13, 0x68, 0xe6, 0x15, 0x90, 0x6d, 0x68, 0x68, 0xcf, 0x51, 0x3a, 0x0d, 0xf1,
	0x5f, 0x77, 0xe9, 0xf3, 0xcc, 0x45, 0xf3, 0x34, 0xff, 0x0b, 0x80, 0xb9, 0x8b, 0x7c, 0x02, 0xa0,
	0x9d, 0x5f, 0x9d, 0x4d, 0x13, 0x97, 0xe2, 0xad, 0x85, 0x14, 0xca, 0x43, 0x73, 0x24, 0xff, 0x6b,
	0xa8, 0x67, 0x0e, 0x42, 0xa0, 0x84, 0x67, 0xd3, 0xc4, 0x56, 0x59, 0xaf, 0xdf, 0x68, 0x0c, 0xfc,
	0xc7, 0xb0, 0x72, 0xcd, 0x41, 0x3a, 0x6e, 0xc7, 0x56, 0xcf, 0xda, 0xab, 0x33, 0x50, 0x57, 0x97,
	0x5f, 0x8b, 0x70, 0x63, 0xd1, 0x45, 0xee, 0x41, 0x73, 0xc8, 0x53, 0x35, 0x03, 0xf3, 0xfb, 0xd0,
	0xdb, 0x2b, 0xd0, 0x86, 0x41, 0x0d, 0xe9, 0x7d, 0x68, 0x8c, 0x42, 0x1e, 0xd8, 0x6e, 0x6b, 0xb9,
	0x4b, 0xaa, 0x31, 0x1a, 0xcc, 0x28, 0x2c, 0x96, 0xf7, 0xb7, 0x2c, 0x45, 0xcd, 0x43, 0x59, 0x51,
	0x34, 0x98, 0xa7, 0xec, 0x6c, 0x5b, 0x8a, 0xea, 0x7b, 0xd1, 0x52, 0x76, 0xb6, 0x33, 0x35, 0x69,
	0x3e, 0x8d, 0x6a, 0xf1, 0xb2, 0x52, 0x93, 0xe6, 0xf2, 0x58, 0x52, 0x96, 0xa8, 0xa2, 0x46, 0xdd,
	0x91, 0x5c, 0xa6, 0xbb, 0x00, 0x7d, 0xce, 0x43, 0x4b, 0xa9, 0xaa, 0x51, 0x51, 0x7f, 0x6e, 0x85,
	0x65, 0x59, 0x84, 0x4c, 0x58, 0x3c, 0xb6, 0x94, 0x9a, 0xea, 0x8b, 0xca, 0x62, 0xd0, 0x4c, 0x72,
	0xff, 0x5c, 0xa2, 0xb0, 0x9c, 0xba, 0xba, 0xe7, 0x95, 0x64, 0x0d, 0x1a, 0xca, 0x23, 0x00, 0xf5,
	0xf6, 0xb0, 0x0c, 0xd0, 0x9d, 0x5c, 0xef, 0x98, 0xe7, 0x49, 0xc7, 0x3d, 0x4f, 0x3a, 0x47, 0xee,
	0x79, 0xa2, 0x44, 0x28, 0xbe, 0x0e, 0xde, 0xad, 0xda, 0xdf, 0xd0, 0xee, 0x0f, 0x2f, 0x5e, 0xb6,
	0x0b, 0x17, 0x2f, 0xdb, 0x85, 0x17, 0x97, 0x6d, 0xef, 0xe2, 0xb2, 0xed, 0xfd, 0x75, 0xd9, 0xf6,
	0x7e, 0xb9, 0x6a, 0x17, 0x2e, 0xae, 0xda, 0x85, 0x3f, 0xaf, 0xda, 0x05, 0xb8, 0x37, 0xe0, 0x51,
	0xe7, 0x38, 0x0d, 0x4e, 0x91, 0x75, 0x4e, 0x19, 0xc6, 0x98, 0x0c, 0x8e, 0x03, 0x16, 0x9b, 0x4f,
	0xd8, 0xbe, 0x7f, 0xff, 0x60, 0xcc, 0xa4, 0x23, 0x0d, 0x78, 0xd4, 0x9d, 0x72, 0x26, 0x04, 0x8f,
	0x05, 0x06, 0xc9, 0xe0, 0xb8, 0x9b, 0x0b, 0x33, 0x0f, 0xa7, 0xae, 0x09, 0xeb, 0x57, 0xb4, 0x75,
	0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xaa, 0x54, 0x0c, 0x89, 0x09, 0x00, 0x00,
}

func (m *StateUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Updates != nil {
		{
			size := m.Updates.Size()
			i -= size
			if _, err := m.Updates.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateUpdates_KvUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateUpdates_KvUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.KvUpdates != nil {
		{
			size, err := m.KvUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StateUpdates_SqlUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateUpdates_SqlUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SqlUpdates != nil {
		{
			size, err := m.SqlUpdates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *KvStateUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvStateUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KvStateUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deletes) > 0 {
		for iNdEx := len(m.Deletes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Deletes[iNdEx])
			copy(dAtA[i:], m.Deletes[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.Deletes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ItrInfos) > 0 {
		for iNdEx := len(m.ItrInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ItrInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.KeyVersions) > 0 {
		for iNdEx := len(m.KeyVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCompress {
		i--
		if m.IsCompress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxNum != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.TxNum))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockNum != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IterationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IterationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IterationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tree != nil {
		{
			size, err := m.Tree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Inclusive {
		i--
		if m.Inclusive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MerkleTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nodes[iNdEx])
			copy(dAtA[i:], m.Nodes[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.Nodes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Level != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockPointer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPointer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockPointer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.FileNum != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.FileNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SqlStateUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SqlStateUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SqlStateUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InsertStmts) > 0 {
		for iNdEx := len(m.InsertStmts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsertStmts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SelectStmts) > 0 {
		for iNdEx := len(m.SelectStmts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectStmts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SelectStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumOfRows != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.NumOfRows))
		i--
		dAtA[i] = 0x20
	}
	if m.Tree != nil {
		{
			size, err := m.Tree.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Args != nil {
		{
			size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDelete {
		i--
		if m.IsDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Values != nil {
		{
			size := m.Values.Size()
			i -= size
			if _, err := m.Values.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Columns[iNdEx])
			copy(dAtA[i:], m.Columns[iNdEx])
			i = encodeVarintLedger(dAtA, i, uint64(len(m.Columns[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertStatement_InsertValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertStatement_InsertValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsertValues != nil {
		{
			size, err := m.InsertValues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InsertStatement_SelectRows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertStatement_SelectRows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SelectRows != nil {
		{
			size, err := m.SelectRows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InsertValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueTuples) > 0 {
		for iNdEx := len(m.ValueTuples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValueTuples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueExprs) > 0 {
		for iNdEx := len(m.ValueExprs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValueExprs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueExpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueExpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueExpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Args != nil {
		{
			size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Expr) > 0 {
		i -= len(m.Expr)
		copy(dAtA[i:], m.Expr)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Expr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimitiveValue_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_DoubleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleValue))))
	i--
	dAtA[i] = 0x9
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_FloatValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloatValue))))
	i--
	dAtA[i] = 0x15
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_Int32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_Int32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintLedger(dAtA, i, uint64(m.Int32Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintLedger(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_Uint32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_Uint32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintLedger(dAtA, i, uint64(m.Uint32Value))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_Uint64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_Uint64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintLedger(dAtA, i, uint64(m.Uint64Value))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_BoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintLedger(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_BytesValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_BytesValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BytesValue != nil {
		i -= len(m.BytesValue)
		copy(dAtA[i:], m.BytesValue)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.BytesValue)))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *PrimitiveValue_TimeValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveValue_TimeValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimeValue != nil {
		{
			size, err := m.TimeValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintLedger(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Updates != nil {
		n += m.Updates.Size()
	}
	return n
}

func (m *StateUpdates_KvUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KvUpdates != nil {
		l = m.KvUpdates.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *StateUpdates_SqlUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SqlUpdates != nil {
		l = m.SqlUpdates.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *KvStateUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyVersions) > 0 {
		for _, e := range m.KeyVersions {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if len(m.ItrInfos) > 0 {
		for _, e := range m.ItrInfos {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if len(m.Deletes) > 0 {
		for _, s := range m.Deletes {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *KeyVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *ValueVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.IsCompress {
		n += 2
	}
	return n
}

func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNum != 0 {
		n += 1 + sovLedger(uint64(m.BlockNum))
	}
	if m.TxNum != 0 {
		n += 1 + sovLedger(uint64(m.TxNum))
	}
	return n
}

func (m *IterationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Inclusive {
		n += 2
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *MerkleTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovLedger(uint64(m.Level))
	}
	if len(m.Nodes) > 0 {
		for _, b := range m.Nodes {
			l = len(b)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *BlockPointer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileNum != 0 {
		n += 1 + sovLedger(uint64(m.FileNum))
	}
	if m.Offset != 0 {
		n += 1 + sovLedger(uint64(m.Offset))
	}
	return n
}

func (m *SqlStateUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectStmts) > 0 {
		for _, e := range m.SelectStmts {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if len(m.InsertStmts) > 0 {
		for _, e := range m.InsertStmts {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *SelectStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.NumOfRows != 0 {
		n += 1 + sovLedger(uint64(m.NumOfRows))
	}
	return n
}

func (m *InsertStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	if m.Values != nil {
		n += m.Values.Size()
	}
	if m.IsDelete {
		n += 2
	}
	return n
}

func (m *InsertStatement_InsertValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsertValues != nil {
		l = m.InsertValues.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *InsertStatement_SelectRows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectRows != nil {
		l = m.SelectRows.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *InsertValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValueTuples) > 0 {
		for _, e := range m.ValueTuples {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *ValueTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValueExprs) > 0 {
		for _, e := range m.ValueExprs {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *ValueExpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expr)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *PrimitiveValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *PrimitiveValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *PrimitiveValue_DoubleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *PrimitiveValue_FloatValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *PrimitiveValue_Int32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLedger(uint64(m.Int32Value))
	return n
}
func (m *PrimitiveValue_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLedger(uint64(m.Int64Value))
	return n
}
func (m *PrimitiveValue_Uint32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLedger(uint64(m.Uint32Value))
	return n
}
func (m *PrimitiveValue_Uint64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovLedger(uint64(m.Uint64Value))
	return n
}
func (m *PrimitiveValue_BoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PrimitiveValue_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovLedger(uint64(l))
	return n
}
func (m *PrimitiveValue_BytesValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesValue != nil {
		l = len(m.BytesValue)
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *PrimitiveValue_TimeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeValue != nil {
		l = m.TimeValue.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func sovLedger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedger(x uint64) (n int) {
	return sovLedger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KvStateUpdates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updates = &StateUpdates_KvUpdates{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SqlStateUpdates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updates = &StateUpdates_SqlUpdates{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvStateUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KvStateUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KvStateUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyVersions = append(m.KeyVersions, &KeyVersion{})
			if err := m.KeyVersions[len(m.KeyVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItrInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItrInfos = append(m.ItrInfos, &IterationInfo{})
			if err := m.ItrInfos[len(m.ItrInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &KeyValue{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deletes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deletes = append(m.Deletes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxNum", wireType)
			}
			m.TxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IterationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IterationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IterationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inclusive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inclusive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &MerkleTree{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, make([]byte, postIndex-iNdEx))
			copy(m.Nodes[len(m.Nodes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPointer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPointer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPointer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNum", wireType)
			}
			m.FileNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SqlStateUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SqlStateUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SqlStateUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectStmts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectStmts = append(m.SelectStmts, &SelectStatement{})
			if err := m.SelectStmts[len(m.SelectStmts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertStmts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertStmts = append(m.InsertStmts, &InsertStatement{})
			if err := m.InsertStmts[len(m.InsertStmts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &PrimitiveValues{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &MerkleTree{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfRows", wireType)
			}
			m.NumOfRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOfRows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InsertValues{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Values = &InsertStatement_InsertValues{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectRows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectStatement{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Values = &InsertStatement_SelectRows{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueTuples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueTuples = append(m.ValueTuples, &ValueTuple{})
			if err := m.ValueTuples[len(m.ValueTuples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueExprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueExprs = append(m.ValueExprs, &ValueExpr{})
			if err := m.ValueExprs[len(m.ValueExprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueExpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueExpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueExpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &PrimitiveValues{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &PrimitiveValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &PrimitiveValue_DoubleValue{float64(math.Float64frombits(v))}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &PrimitiveValue_FloatValue{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Int32Value{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Int64Value{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32Value", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Uint32Value{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64Value", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &PrimitiveValue_Uint64Value{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &PrimitiveValue_BoolValue{b}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &PrimitiveValue_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &PrimitiveValue_BytesValue{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &PrimitiveValue_TimeValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedger = fmt.Errorf("proto: unexpected end of group")
)
