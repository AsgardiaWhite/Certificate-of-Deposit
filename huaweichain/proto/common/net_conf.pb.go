// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/net_conf.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocType int32

const (
	BALANCE AllocType = 0
	CHORD   AllocType = 1
)

var AllocType_name = map[int32]string{
	0: "BALANCE",
	1: "CHORD",
}

var AllocType_value = map[string]int32{
	"BALANCE": 0,
	"CHORD":   1,
}

func (x AllocType) String() string {
	return proto.EnumName(AllocType_name, int32(x))
}

func (AllocType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{0}
}

type DomainOp_Op int32

const (
	ADD    DomainOp_Op = 0
	REMOVE DomainOp_Op = 1
)

var DomainOp_Op_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
}

var DomainOp_Op_value = map[string]int32{
	"ADD":    0,
	"REMOVE": 1,
}

func (x DomainOp_Op) String() string {
	return proto.EnumName(DomainOp_Op_name, int32(x))
}

func (DomainOp_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{15, 0}
}

type Domain struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

type NetworkConfig struct {
	Domains      []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	Zones        []*Zone   `protobuf:"bytes,2,rep,name=zones,proto3" json:"zones,omitempty"`
	Sync         *SyncConf `protobuf:"bytes,3,opt,name=sync,proto3" json:"sync,omitempty"`
	ZoneTemplate *ZoneConf `protobuf:"bytes,4,opt,name=zone_template,json=zoneTemplate,proto3" json:"zone_template,omitempty"`
	ConsZone     *ZoneConf `protobuf:"bytes,6,opt,name=cons_zone,json=consZone,proto3" json:"cons_zone,omitempty"`
	AutoGenZone  bool      `protobuf:"varint,5,opt,name=auto_gen_zone,json=autoGenZone,proto3" json:"auto_gen_zone,omitempty"`
}

func (m *NetworkConfig) Reset()         { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()    {}
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{1}
}
func (m *NetworkConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkConfig.Merge(m, src)
}
func (m *NetworkConfig) XXX_Size() int {
	return m.Size()
}
func (m *NetworkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkConfig proto.InternalMessageInfo

type ZoneConf struct {
	BlockBatch uint32     `protobuf:"varint,1,opt,name=block_batch,json=blockBatch,proto3" json:"block_batch,omitempty"`
	Attachable bool       `protobuf:"varint,2,opt,name=attachable,proto3" json:"attachable,omitempty"`
	Alloc      *Allocator `protobuf:"bytes,3,opt,name=alloc,proto3" json:"alloc,omitempty"`
}

func (m *ZoneConf) Reset()         { *m = ZoneConf{} }
func (m *ZoneConf) String() string { return proto.CompactTextString(m) }
func (*ZoneConf) ProtoMessage()    {}
func (*ZoneConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{2}
}
func (m *ZoneConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneConf.Merge(m, src)
}
func (m *ZoneConf) XXX_Size() int {
	return m.Size()
}
func (m *ZoneConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneConf.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneConf proto.InternalMessageInfo

type Zone struct {
	Id      string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Domains []string  `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	Conf    *ZoneConf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	AutoGen bool      `protobuf:"varint,4,opt,name=auto_gen,json=autoGen,proto3" json:"auto_gen,omitempty"`
}

func (m *Zone) Reset()         { *m = Zone{} }
func (m *Zone) String() string { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()    {}
func (*Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{3}
}
func (m *Zone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Zone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zone.Merge(m, src)
}
func (m *Zone) XXX_Size() int {
	return m.Size()
}
func (m *Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_Zone proto.InternalMessageInfo

type PermissionSet struct {
	Domains []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	Zones   []*Zone   `protobuf:"bytes,2,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (m *PermissionSet) Reset()         { *m = PermissionSet{} }
func (m *PermissionSet) String() string { return proto.CompactTextString(m) }
func (*PermissionSet) ProtoMessage()    {}
func (*PermissionSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{4}
}
func (m *PermissionSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionSet.Merge(m, src)
}
func (m *PermissionSet) XXX_Size() int {
	return m.Size()
}
func (m *PermissionSet) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionSet.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionSet proto.InternalMessageInfo

type ZoneProperties struct {
	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Properties []*Property `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (m *ZoneProperties) Reset()         { *m = ZoneProperties{} }
func (m *ZoneProperties) String() string { return proto.CompactTextString(m) }
func (*ZoneProperties) ProtoMessage()    {}
func (*ZoneProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{5}
}
func (m *ZoneProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneProperties.Merge(m, src)
}
func (m *ZoneProperties) XXX_Size() int {
	return m.Size()
}
func (m *ZoneProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneProperties.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneProperties proto.InternalMessageInfo

type Property struct {
	K string `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	// Types that are valid to be assigned to V:
	//	*Property_I32
	//	*Property_I64
	//	*Property_U32
	//	*Property_U64
	//	*Property_Bool
	//	*Property_Str
	//	*Property_Bytes
	//	*Property_IntArr_
	//	*Property_StrArr_
	V isProperty_V `protobuf_oneof:"v"`
}

func (m *Property) Reset()         { *m = Property{} }
func (m *Property) String() string { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()    {}
func (*Property) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{6}
}
func (m *Property) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Property) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Property.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Property) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property.Merge(m, src)
}
func (m *Property) XXX_Size() int {
	return m.Size()
}
func (m *Property) XXX_DiscardUnknown() {
	xxx_messageInfo_Property.DiscardUnknown(m)
}

var xxx_messageInfo_Property proto.InternalMessageInfo

type isProperty_V interface {
	isProperty_V()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Property_I32 struct {
	I32 int32 `protobuf:"varint,2,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
}
type Property_I64 struct {
	I64 int64 `protobuf:"varint,3,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
}
type Property_U32 struct {
	U32 uint32 `protobuf:"varint,4,opt,name=u32,proto3,oneof" json:"u32,omitempty"`
}
type Property_U64 struct {
	U64 uint64 `protobuf:"varint,5,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
}
type Property_Bool struct {
	Bool bool `protobuf:"varint,6,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
}
type Property_Str struct {
	Str string `protobuf:"bytes,7,opt,name=str,proto3,oneof" json:"str,omitempty"`
}
type Property_Bytes struct {
	Bytes []byte `protobuf:"bytes,8,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}
type Property_IntArr_ struct {
	IntArr *Property_IntArr `protobuf:"bytes,9,opt,name=int_arr,json=intArr,proto3,oneof" json:"int_arr,omitempty"`
}
type Property_StrArr_ struct {
	StrArr *Property_StrArr `protobuf:"bytes,10,opt,name=str_arr,json=strArr,proto3,oneof" json:"str_arr,omitempty"`
}

func (*Property_I32) isProperty_V()     {}
func (*Property_I64) isProperty_V()     {}
func (*Property_U32) isProperty_V()     {}
func (*Property_U64) isProperty_V()     {}
func (*Property_Bool) isProperty_V()    {}
func (*Property_Str) isProperty_V()     {}
func (*Property_Bytes) isProperty_V()   {}
func (*Property_IntArr_) isProperty_V() {}
func (*Property_StrArr_) isProperty_V() {}

func (m *Property) GetV() isProperty_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *Property) GetI32() int32 {
	if x, ok := m.GetV().(*Property_I32); ok {
		return x.I32
	}
	return 0
}

func (m *Property) GetI64() int64 {
	if x, ok := m.GetV().(*Property_I64); ok {
		return x.I64
	}
	return 0
}

func (m *Property) GetU32() uint32 {
	if x, ok := m.GetV().(*Property_U32); ok {
		return x.U32
	}
	return 0
}

func (m *Property) GetU64() uint64 {
	if x, ok := m.GetV().(*Property_U64); ok {
		return x.U64
	}
	return 0
}

func (m *Property) GetBool() bool {
	if x, ok := m.GetV().(*Property_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Property) GetStr() string {
	if x, ok := m.GetV().(*Property_Str); ok {
		return x.Str
	}
	return ""
}

func (m *Property) GetBytes() []byte {
	if x, ok := m.GetV().(*Property_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Property) GetIntArr() *Property_IntArr {
	if x, ok := m.GetV().(*Property_IntArr_); ok {
		return x.IntArr
	}
	return nil
}

func (m *Property) GetStrArr() *Property_StrArr {
	if x, ok := m.GetV().(*Property_StrArr_); ok {
		return x.StrArr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Property) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Property_I32)(nil),
		(*Property_I64)(nil),
		(*Property_U32)(nil),
		(*Property_U64)(nil),
		(*Property_Bool)(nil),
		(*Property_Str)(nil),
		(*Property_Bytes)(nil),
		(*Property_IntArr_)(nil),
		(*Property_StrArr_)(nil),
	}
}

type Property_StrArr struct {
	Ss []string `protobuf:"bytes,1,rep,name=ss,proto3" json:"ss,omitempty"`
}

func (m *Property_StrArr) Reset()         { *m = Property_StrArr{} }
func (m *Property_StrArr) String() string { return proto.CompactTextString(m) }
func (*Property_StrArr) ProtoMessage()    {}
func (*Property_StrArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{6, 0}
}
func (m *Property_StrArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Property_StrArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Property_StrArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Property_StrArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property_StrArr.Merge(m, src)
}
func (m *Property_StrArr) XXX_Size() int {
	return m.Size()
}
func (m *Property_StrArr) XXX_DiscardUnknown() {
	xxx_messageInfo_Property_StrArr.DiscardUnknown(m)
}

var xxx_messageInfo_Property_StrArr proto.InternalMessageInfo

type Property_IntArr struct {
	Is []int32 `protobuf:"varint,1,rep,packed,name=is,proto3" json:"is,omitempty"`
}

func (m *Property_IntArr) Reset()         { *m = Property_IntArr{} }
func (m *Property_IntArr) String() string { return proto.CompactTextString(m) }
func (*Property_IntArr) ProtoMessage()    {}
func (*Property_IntArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{6, 1}
}
func (m *Property_IntArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Property_IntArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Property_IntArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Property_IntArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property_IntArr.Merge(m, src)
}
func (m *Property_IntArr) XXX_Size() int {
	return m.Size()
}
func (m *Property_IntArr) XXX_DiscardUnknown() {
	xxx_messageInfo_Property_IntArr.DiscardUnknown(m)
}

var xxx_messageInfo_Property_IntArr proto.InternalMessageInfo

type Entrypoint struct {
	ZoneId        string   `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	Coordinator   bool     `protobuf:"varint,2,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	InitialMaster bool     `protobuf:"varint,3,opt,name=initial_master,json=initialMaster,proto3" json:"initial_master,omitempty"`
	Linkers       []string `protobuf:"bytes,4,rep,name=linkers,proto3" json:"linkers,omitempty"`
	Seeds         []string `protobuf:"bytes,5,rep,name=seeds,proto3" json:"seeds,omitempty"`
}

func (m *Entrypoint) Reset()         { *m = Entrypoint{} }
func (m *Entrypoint) String() string { return proto.CompactTextString(m) }
func (*Entrypoint) ProtoMessage()    {}
func (*Entrypoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{7}
}
func (m *Entrypoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entrypoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entrypoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entrypoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entrypoint.Merge(m, src)
}
func (m *Entrypoint) XXX_Size() int {
	return m.Size()
}
func (m *Entrypoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Entrypoint.DiscardUnknown(m)
}

var xxx_messageInfo_Entrypoint proto.InternalMessageInfo

type SyncConf struct {
	TickInterval  uint32 `protobuf:"varint,1,opt,name=tick_interval,json=tickInterval,proto3" json:"tick_interval,omitempty"`
	HeartbeatTick uint32 `protobuf:"varint,2,opt,name=heartbeat_tick,json=heartbeatTick,proto3" json:"heartbeat_tick,omitempty"`
	TimeoutTick   uint32 `protobuf:"varint,3,opt,name=timeout_tick,json=timeoutTick,proto3" json:"timeout_tick,omitempty"`
}

func (m *SyncConf) Reset()         { *m = SyncConf{} }
func (m *SyncConf) String() string { return proto.CompactTextString(m) }
func (*SyncConf) ProtoMessage()    {}
func (*SyncConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{8}
}
func (m *SyncConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncConf.Merge(m, src)
}
func (m *SyncConf) XXX_Size() int {
	return m.Size()
}
func (m *SyncConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncConf.DiscardUnknown(m)
}

var xxx_messageInfo_SyncConf proto.InternalMessageInfo

type BalanceAlloc struct {
	Fan uint32 `protobuf:"varint,1,opt,name=fan,proto3" json:"fan,omitempty"`
}

func (m *BalanceAlloc) Reset()         { *m = BalanceAlloc{} }
func (m *BalanceAlloc) String() string { return proto.CompactTextString(m) }
func (*BalanceAlloc) ProtoMessage()    {}
func (*BalanceAlloc) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{9}
}
func (m *BalanceAlloc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceAlloc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceAlloc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceAlloc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceAlloc.Merge(m, src)
}
func (m *BalanceAlloc) XXX_Size() int {
	return m.Size()
}
func (m *BalanceAlloc) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceAlloc.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceAlloc proto.InternalMessageInfo

type ChordAlloc struct {
}

func (m *ChordAlloc) Reset()         { *m = ChordAlloc{} }
func (m *ChordAlloc) String() string { return proto.CompactTextString(m) }
func (*ChordAlloc) ProtoMessage()    {}
func (*ChordAlloc) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{10}
}
func (m *ChordAlloc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChordAlloc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChordAlloc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChordAlloc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChordAlloc.Merge(m, src)
}
func (m *ChordAlloc) XXX_Size() int {
	return m.Size()
}
func (m *ChordAlloc) XXX_DiscardUnknown() {
	xxx_messageInfo_ChordAlloc.DiscardUnknown(m)
}

var xxx_messageInfo_ChordAlloc proto.InternalMessageInfo

type Allocator struct {
	Type              AllocType `protobuf:"varint,1,opt,name=type,proto3,enum=common.AllocType" json:"type,omitempty"`
	MaxCoordinatorNum uint32    `protobuf:"varint,2,opt,name=max_coordinator_num,json=maxCoordinatorNum,proto3" json:"max_coordinator_num,omitempty"`
	MaxPeerNum        uint32    `protobuf:"varint,3,opt,name=max_peer_num,json=maxPeerNum,proto3" json:"max_peer_num,omitempty"`
	// Types that are valid to be assigned to Alloc:
	//	*Allocator_Balance
	Alloc isAllocator_Alloc `protobuf_oneof:"alloc"`
}

func (m *Allocator) Reset()         { *m = Allocator{} }
func (m *Allocator) String() string { return proto.CompactTextString(m) }
func (*Allocator) ProtoMessage()    {}
func (*Allocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{11}
}
func (m *Allocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Allocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Allocator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Allocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocator.Merge(m, src)
}
func (m *Allocator) XXX_Size() int {
	return m.Size()
}
func (m *Allocator) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocator.DiscardUnknown(m)
}

var xxx_messageInfo_Allocator proto.InternalMessageInfo

type isAllocator_Alloc interface {
	isAllocator_Alloc()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Allocator_Balance struct {
	Balance *BalanceAlloc `protobuf:"bytes,4,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
}

func (*Allocator_Balance) isAllocator_Alloc() {}

func (m *Allocator) GetAlloc() isAllocator_Alloc {
	if m != nil {
		return m.Alloc
	}
	return nil
}

func (m *Allocator) GetBalance() *BalanceAlloc {
	if x, ok := m.GetAlloc().(*Allocator_Balance); ok {
		return x.Balance
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Allocator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Allocator_Balance)(nil),
	}
}

type EndorseTarget struct {
	Zone        string   `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	Endorser    string   `protobuf:"bytes,2,opt,name=endorser,proto3" json:"endorser,omitempty"`
	ForwardPath []string `protobuf:"bytes,3,rep,name=forward_path,json=forwardPath,proto3" json:"forward_path,omitempty"`
}

func (m *EndorseTarget) Reset()         { *m = EndorseTarget{} }
func (m *EndorseTarget) String() string { return proto.CompactTextString(m) }
func (*EndorseTarget) ProtoMessage()    {}
func (*EndorseTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{12}
}
func (m *EndorseTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndorseTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndorseTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndorseTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndorseTarget.Merge(m, src)
}
func (m *EndorseTarget) XXX_Size() int {
	return m.Size()
}
func (m *EndorseTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_EndorseTarget.DiscardUnknown(m)
}

var xxx_messageInfo_EndorseTarget proto.InternalMessageInfo

type ProposeTarget struct {
	Proposer    string   `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	ForwardPath []string `protobuf:"bytes,2,rep,name=forward_path,json=forwardPath,proto3" json:"forward_path,omitempty"`
}

func (m *ProposeTarget) Reset()         { *m = ProposeTarget{} }
func (m *ProposeTarget) String() string { return proto.CompactTextString(m) }
func (*ProposeTarget) ProtoMessage()    {}
func (*ProposeTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{13}
}
func (m *ProposeTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeTarget.Merge(m, src)
}
func (m *ProposeTarget) XXX_Size() int {
	return m.Size()
}
func (m *ProposeTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeTarget proto.InternalMessageInfo

type NetUpdate struct {
	// Types that are valid to be assigned to Update:
	//	*NetUpdate_Zone
	//	*NetUpdate_Domain
	Update isNetUpdate_Update `protobuf_oneof:"update"`
}

func (m *NetUpdate) Reset()         { *m = NetUpdate{} }
func (m *NetUpdate) String() string { return proto.CompactTextString(m) }
func (*NetUpdate) ProtoMessage()    {}
func (*NetUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{14}
}
func (m *NetUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetUpdate.Merge(m, src)
}
func (m *NetUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NetUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NetUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NetUpdate proto.InternalMessageInfo

type isNetUpdate_Update interface {
	isNetUpdate_Update()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetUpdate_Zone struct {
	Zone *ZoneOp `protobuf:"bytes,1,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
}
type NetUpdate_Domain struct {
	Domain *DomainOp `protobuf:"bytes,2,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*NetUpdate_Zone) isNetUpdate_Update()   {}
func (*NetUpdate_Domain) isNetUpdate_Update() {}

func (m *NetUpdate) GetUpdate() isNetUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *NetUpdate) GetZone() *ZoneOp {
	if x, ok := m.GetUpdate().(*NetUpdate_Zone); ok {
		return x.Zone
	}
	return nil
}

func (m *NetUpdate) GetDomain() *DomainOp {
	if x, ok := m.GetUpdate().(*NetUpdate_Domain); ok {
		return x.Domain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetUpdate_Zone)(nil),
		(*NetUpdate_Domain)(nil),
	}
}

type DomainOp struct {
	Op      DomainOp_Op `protobuf:"varint,1,opt,name=op,proto3,enum=common.DomainOp_Op" json:"op,omitempty"`
	Domains []string    `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (m *DomainOp) Reset()         { *m = DomainOp{} }
func (m *DomainOp) String() string { return proto.CompactTextString(m) }
func (*DomainOp) ProtoMessage()    {}
func (*DomainOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{15}
}
func (m *DomainOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainOp.Merge(m, src)
}
func (m *DomainOp) XXX_Size() int {
	return m.Size()
}
func (m *DomainOp) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainOp.DiscardUnknown(m)
}

var xxx_messageInfo_DomainOp proto.InternalMessageInfo

type ZoneOp struct {
	// Types that are valid to be assigned to Op:
	//	*ZoneOp_Add_
	//	*ZoneOp_Remove_
	Op isZoneOp_Op `protobuf_oneof:"op"`
}

func (m *ZoneOp) Reset()         { *m = ZoneOp{} }
func (m *ZoneOp) String() string { return proto.CompactTextString(m) }
func (*ZoneOp) ProtoMessage()    {}
func (*ZoneOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{16}
}
func (m *ZoneOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneOp.Merge(m, src)
}
func (m *ZoneOp) XXX_Size() int {
	return m.Size()
}
func (m *ZoneOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneOp.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneOp proto.InternalMessageInfo

type isZoneOp_Op interface {
	isZoneOp_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ZoneOp_Add_ struct {
	Add *ZoneOp_Add `protobuf:"bytes,1,opt,name=add,proto3,oneof" json:"add,omitempty"`
}
type ZoneOp_Remove_ struct {
	Remove *ZoneOp_Remove `protobuf:"bytes,2,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}

func (*ZoneOp_Add_) isZoneOp_Op()    {}
func (*ZoneOp_Remove_) isZoneOp_Op() {}

func (m *ZoneOp) GetOp() isZoneOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *ZoneOp) GetAdd() *ZoneOp_Add {
	if x, ok := m.GetOp().(*ZoneOp_Add_); ok {
		return x.Add
	}
	return nil
}

func (m *ZoneOp) GetRemove() *ZoneOp_Remove {
	if x, ok := m.GetOp().(*ZoneOp_Remove_); ok {
		return x.Remove
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZoneOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZoneOp_Add_)(nil),
		(*ZoneOp_Remove_)(nil),
	}
}

type ZoneOp_Add struct {
	Zones []*ZoneProperties `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (m *ZoneOp_Add) Reset()         { *m = ZoneOp_Add{} }
func (m *ZoneOp_Add) String() string { return proto.CompactTextString(m) }
func (*ZoneOp_Add) ProtoMessage()    {}
func (*ZoneOp_Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{16, 0}
}
func (m *ZoneOp_Add) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneOp_Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneOp_Add.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneOp_Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneOp_Add.Merge(m, src)
}
func (m *ZoneOp_Add) XXX_Size() int {
	return m.Size()
}
func (m *ZoneOp_Add) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneOp_Add.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneOp_Add proto.InternalMessageInfo

type ZoneOp_Remove struct {
	Zones []string `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (m *ZoneOp_Remove) Reset()         { *m = ZoneOp_Remove{} }
func (m *ZoneOp_Remove) String() string { return proto.CompactTextString(m) }
func (*ZoneOp_Remove) ProtoMessage()    {}
func (*ZoneOp_Remove) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11fa6e3572cef34, []int{16, 1}
}
func (m *ZoneOp_Remove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneOp_Remove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneOp_Remove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneOp_Remove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneOp_Remove.Merge(m, src)
}
func (m *ZoneOp_Remove) XXX_Size() int {
	return m.Size()
}
func (m *ZoneOp_Remove) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneOp_Remove.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneOp_Remove proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.AllocType", AllocType_name, AllocType_value)
	proto.RegisterEnum("common.DomainOp_Op", DomainOp_Op_name, DomainOp_Op_value)
	proto.RegisterType((*Domain)(nil), "common.Domain")
	proto.RegisterType((*NetworkConfig)(nil), "common.NetworkConfig")
	proto.RegisterType((*ZoneConf)(nil), "common.ZoneConf")
	proto.RegisterType((*Zone)(nil), "common.Zone")
	proto.RegisterType((*PermissionSet)(nil), "common.PermissionSet")
	proto.RegisterType((*ZoneProperties)(nil), "common.ZoneProperties")
	proto.RegisterType((*Property)(nil), "common.Property")
	proto.RegisterType((*Property_StrArr)(nil), "common.Property.StrArr")
	proto.RegisterType((*Property_IntArr)(nil), "common.Property.IntArr")
	proto.RegisterType((*Entrypoint)(nil), "common.Entrypoint")
	proto.RegisterType((*SyncConf)(nil), "common.SyncConf")
	proto.RegisterType((*BalanceAlloc)(nil), "common.BalanceAlloc")
	proto.RegisterType((*ChordAlloc)(nil), "common.ChordAlloc")
	proto.RegisterType((*Allocator)(nil), "common.Allocator")
	proto.RegisterType((*EndorseTarget)(nil), "common.EndorseTarget")
	proto.RegisterType((*ProposeTarget)(nil), "common.ProposeTarget")
	proto.RegisterType((*NetUpdate)(nil), "common.NetUpdate")
	proto.RegisterType((*DomainOp)(nil), "common.DomainOp")
	proto.RegisterType((*ZoneOp)(nil), "common.ZoneOp")
	proto.RegisterType((*ZoneOp_Add)(nil), "common.ZoneOp.Add")
	proto.RegisterType((*ZoneOp_Remove)(nil), "common.ZoneOp.Remove")
}

func init() { proto.RegisterFile("common/net_conf.proto", fileDescriptor_b11fa6e3572cef34) }

var fileDescriptor_b11fa6e3572cef34 = []byte{
	// 1207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0x43, 0x51, 0x23, 0xc9, 0x70, 0x36, 0x4e, 0xc2, 0xf8, 0xa0, 0xaa, 0x74, 0xd2,
	0x1a, 0x41, 0x2b, 0x07, 0xb6, 0xe3, 0xbb, 0x64, 0x1b, 0x75, 0x80, 0xc6, 0x36, 0x36, 0x6e, 0x0f,
	0x01, 0x0a, 0x61, 0x45, 0xae, 0xa5, 0x85, 0xc4, 0x5d, 0x76, 0xb9, 0x8a, 0xa3, 0xa2, 0xaf, 0x50,
	0xa0, 0x4f, 0xd0, 0x27, 0x29, 0xd0, 0x6b, 0x80, 0x5e, 0x72, 0xec, 0xb1, 0x49, 0x5e, 0xa4, 0xd8,
	0x1f, 0xca, 0x8a, 0x03, 0xdf, 0x7a, 0xdb, 0xf9, 0xe6, 0x9b, 0xd9, 0xf9, 0xdb, 0x21, 0xe1, 0x5e,
	0x2c, 0xd2, 0x54, 0xf0, 0x1d, 0x4e, 0xd5, 0x30, 0x16, 0xfc, 0xb2, 0x97, 0x49, 0xa1, 0x04, 0xf2,
	0x2d, 0xbc, 0xb9, 0x31, 0x16, 0x63, 0x61, 0xa0, 0x1d, 0x7d, 0xb2, 0xda, 0xe8, 0x29, 0xf8, 0x47,
	0x22, 0x25, 0x8c, 0x23, 0x04, 0x55, 0x4e, 0x52, 0x1a, 0x7a, 0x5d, 0x6f, 0xbb, 0x81, 0xcd, 0x59,
	0x63, 0x19, 0x51, 0x93, 0xb0, 0x6c, 0x31, 0x7d, 0x8e, 0x7e, 0x2b, 0x43, 0xfb, 0x94, 0xaa, 0x2b,
	0x21, 0xa7, 0x87, 0x82, 0x5f, 0xb2, 0x31, 0xda, 0x86, 0x7a, 0x62, 0x7c, 0xe4, 0xa1, 0xd7, 0xad,
	0x6c, 0x37, 0x77, 0xd7, 0x7a, 0xf6, 0xce, 0x9e, 0x75, 0x8d, 0x0b, 0x35, 0x8a, 0xa0, 0xf6, 0x8b,
	0xe0, 0x34, 0x0f, 0xcb, 0x86, 0xd7, 0x2a, 0x78, 0xaf, 0x04, 0xa7, 0xd8, 0xaa, 0xd0, 0x23, 0xa8,
	0xe6, 0x0b, 0x1e, 0x87, 0x95, 0xae, 0xb7, 0xdd, 0xdc, 0x5d, 0x2f, 0x28, 0x2f, 0x17, 0x3c, 0xd6,
	0xf7, 0x61, 0xa3, 0x45, 0xcf, 0xa0, 0xad, 0xe9, 0x43, 0x45, 0xd3, 0x6c, 0x46, 0x14, 0x0d, 0xab,
	0x9f, 0xd2, 0xb5, 0x47, 0x43, 0x6f, 0x69, 0xda, 0x85, 0x63, 0xa1, 0x6f, 0xa1, 0x11, 0x0b, 0x9e,
	0x0f, 0x35, 0x18, 0xfa, 0xb7, 0x98, 0x04, 0x9a, 0xa2, 0x25, 0x14, 0x41, 0x9b, 0xcc, 0x95, 0x18,
	0x8e, 0x29, 0xb7, 0x26, 0xb5, 0xae, 0xb7, 0x1d, 0xe0, 0xa6, 0x06, 0xbf, 0xa3, 0x5c, 0x73, 0x22,
	0x05, 0x41, 0x61, 0x89, 0xbe, 0x80, 0xe6, 0x68, 0x26, 0xe2, 0xe9, 0x70, 0x44, 0x54, 0x3c, 0x31,
	0xa5, 0x6c, 0x63, 0x30, 0xd0, 0x40, 0x23, 0xa8, 0x03, 0x40, 0x94, 0x22, 0xf1, 0x84, 0x8c, 0x66,
	0xd4, 0x94, 0x35, 0xc0, 0x2b, 0x08, 0xfa, 0x1a, 0x6a, 0x64, 0x36, 0x13, 0x45, 0xf6, 0x77, 0x8a,
	0xd8, 0xfa, 0x1a, 0x24, 0x4a, 0x48, 0x6c, 0xf5, 0xd1, 0xcf, 0x50, 0x35, 0x11, 0xae, 0x41, 0x99,
	0x25, 0xae, 0x67, 0x65, 0x96, 0xa0, 0xf0, 0xba, 0x17, 0xba, 0xc6, 0x8d, 0xeb, 0xda, 0x3f, 0x82,
	0xaa, 0x9e, 0x8a, 0x9b, 0x75, 0x5d, 0x66, 0x6d, 0xb4, 0xe8, 0x21, 0x04, 0x45, 0xc6, 0xa6, 0xa4,
	0x01, 0xae, 0xbb, 0x64, 0xa3, 0x9f, 0xa0, 0x7d, 0x4e, 0x65, 0xca, 0xf2, 0x9c, 0x09, 0xfe, 0x92,
	0xaa, 0xff, 0xb7, 0xef, 0x11, 0x86, 0x35, 0x2d, 0x9e, 0x4b, 0x91, 0x51, 0xa9, 0x18, 0xcd, 0x3f,
	0xcb, 0xed, 0x29, 0x40, 0xb6, 0xd4, 0x3a, 0x57, 0xcb, 0x3c, 0x9c, 0xdd, 0x02, 0xaf, 0x70, 0xa2,
	0xbf, 0xcb, 0x10, 0x14, 0x0a, 0xd4, 0x02, 0x6f, 0xea, 0xbc, 0x79, 0x53, 0x84, 0xa0, 0xc2, 0xf6,
	0x76, 0x4d, 0x0b, 0x6a, 0x27, 0x25, 0xac, 0x05, 0x83, 0x1d, 0xec, 0x9b, 0x0a, 0x55, 0x0c, 0x76,
	0xb0, 0xaf, 0xb1, 0xf9, 0xde, 0xae, 0xa9, 0x45, 0x5b, 0x63, 0x73, 0xcb, 0x9b, 0x1f, 0xec, 0x9b,
	0x61, 0xa8, 0x1a, 0xec, 0x60, 0x1f, 0x6d, 0x40, 0x75, 0x24, 0xc4, 0xcc, 0x0c, 0x55, 0x70, 0x52,
	0xc2, 0x46, 0xd2, 0xcc, 0x5c, 0xc9, 0xb0, 0xae, 0x6f, 0xd5, 0xcc, 0x5c, 0x49, 0x74, 0x1f, 0x6a,
	0xa3, 0x85, 0xa2, 0x79, 0x18, 0x74, 0xbd, 0xed, 0xd6, 0x49, 0x09, 0x5b, 0x11, 0xed, 0x42, 0x9d,
	0x71, 0x35, 0x24, 0x52, 0x86, 0x0d, 0xd3, 0xa3, 0x07, 0x37, 0x73, 0xeb, 0x3d, 0xe7, 0xaa, 0x2f,
	0xe5, 0x49, 0x09, 0xfb, 0xcc, 0x9c, 0xb4, 0x4d, 0xae, 0xa4, 0xb1, 0x81, 0x5b, 0x6c, 0x5e, 0x2a,
	0xe9, 0x6c, 0x72, 0x73, 0xda, 0x0c, 0xc1, 0xb7, 0x98, 0x2e, 0x70, 0x6e, 0x7b, 0xd7, 0xc0, 0xe5,
	0x3c, 0xd7, 0x1a, 0x7b, 0x83, 0x29, 0xbd, 0xd5, 0xd4, 0x70, 0x99, 0xe5, 0x83, 0x0a, 0x78, 0xaf,
	0xa3, 0x3f, 0x3c, 0x80, 0x63, 0xae, 0xe4, 0x22, 0x13, 0x8c, 0x2b, 0xf4, 0x00, 0xea, 0xe6, 0x09,
	0x2e, 0x7b, 0xe4, 0x6b, 0xf1, 0x79, 0x82, 0xba, 0xd0, 0x8c, 0x85, 0x90, 0x09, 0xe3, 0x7a, 0x62,
	0xdd, 0x94, 0xaf, 0x42, 0xe8, 0x31, 0xac, 0x31, 0xce, 0x14, 0x23, 0xb3, 0x61, 0x4a, 0x72, 0x45,
	0xa5, 0xa9, 0x79, 0x80, 0xdb, 0x0e, 0x7d, 0x61, 0x40, 0x3d, 0xcc, 0x33, 0xc6, 0xa7, 0x54, 0xe6,
	0x61, 0xd5, 0x0e, 0xb3, 0x13, 0xd1, 0x06, 0xd4, 0x72, 0x4a, 0x93, 0x3c, 0xac, 0x19, 0xdc, 0x0a,
	0xd1, 0x02, 0x82, 0x62, 0x4d, 0xa0, 0x2d, 0x68, 0x2b, 0x16, 0x4f, 0x87, 0x8c, 0x2b, 0x2a, 0x5f,
	0x93, 0x99, 0x7b, 0x8c, 0x2d, 0x0d, 0x3e, 0x77, 0x98, 0x8e, 0x63, 0x42, 0x89, 0x54, 0x23, 0x4a,
	0xd4, 0x50, 0x6b, 0x4c, 0xb0, 0x6d, 0xdc, 0x5e, 0xa2, 0x17, 0x2c, 0x9e, 0xa2, 0x2f, 0xa1, 0xa5,
	0x58, 0x4a, 0xc5, 0xdc, 0x91, 0x2a, 0x86, 0xd4, 0x74, 0x98, 0xa6, 0x44, 0x5d, 0x68, 0x0d, 0xc8,
	0x8c, 0xf0, 0x98, 0x9a, 0xa7, 0x8a, 0xd6, 0xa1, 0x72, 0x49, 0xb8, 0xbb, 0x54, 0x1f, 0xa3, 0x16,
	0xc0, 0xe1, 0x44, 0xc8, 0xc4, 0xe8, 0xa3, 0xbf, 0x3c, 0x68, 0x2c, 0x1f, 0x35, 0x7a, 0x0c, 0x55,
	0xb5, 0xc8, 0xec, 0xee, 0x5d, 0xbb, 0xf1, 0xea, 0x2f, 0x16, 0x19, 0xc5, 0x46, 0x8d, 0x7a, 0x70,
	0x37, 0x25, 0x6f, 0x86, 0x2b, 0x95, 0x1c, 0xf2, 0x79, 0xea, 0x62, 0xbe, 0x93, 0x92, 0x37, 0x87,
	0xd7, 0x9a, 0xd3, 0x79, 0x8a, 0xba, 0xd0, 0xd2, 0xfc, 0x8c, 0x52, 0x4b, 0xb4, 0x71, 0x43, 0x4a,
	0xde, 0x9c, 0x53, 0x6a, 0x18, 0x4f, 0xa1, 0x3e, 0xb2, 0x61, 0xbb, 0x05, 0xba, 0x51, 0xdc, 0xbd,
	0x9a, 0xcd, 0x49, 0x09, 0x17, 0xb4, 0x41, 0xdd, 0x6d, 0xa8, 0x68, 0x04, 0xed, 0x63, 0x9e, 0x08,
	0x99, 0xd3, 0x0b, 0x22, 0xc7, 0x54, 0xe9, 0x8f, 0x85, 0xd9, 0x91, 0xee, 0x03, 0xa2, 0xcf, 0x68,
	0x13, 0x02, 0x6a, 0x49, 0xd2, 0x7d, 0x44, 0x96, 0xb2, 0xae, 0xea, 0xa5, 0x90, 0x57, 0x44, 0x26,
	0x43, 0xf3, 0x91, 0xa9, 0x98, 0x56, 0x36, 0x1d, 0x76, 0xae, 0xbf, 0x35, 0xa7, 0xd0, 0xd6, 0x73,
	0x2c, 0x96, 0x77, 0x6c, 0x42, 0x90, 0x59, 0x40, 0xba, 0x7b, 0x96, 0xf2, 0x67, 0xfe, 0xca, 0x9f,
	0xfb, 0x1b, 0x43, 0xe3, 0x94, 0xaa, 0x1f, 0xb2, 0x44, 0x7f, 0x0b, 0x1e, 0xad, 0xc4, 0xbb, 0xb2,
	0xbb, 0xf4, 0x12, 0x3a, 0xcb, 0xf4, 0x0b, 0x36, 0x19, 0x3c, 0x01, 0xdf, 0x6e, 0x31, 0x13, 0xff,
	0xca, 0xc2, 0xb1, 0x3b, 0xce, 0x30, 0x1d, 0x63, 0x10, 0x80, 0x3f, 0x37, 0xbe, 0xa3, 0x04, 0x82,
	0x42, 0x8f, 0xb6, 0xa0, 0x2c, 0x32, 0xd7, 0xda, 0xbb, 0x37, 0xad, 0x7b, 0x67, 0x19, 0x2e, 0x8b,
	0xec, 0xf6, 0xbd, 0x1d, 0x3d, 0x84, 0xf2, 0x59, 0x86, 0xea, 0x50, 0xe9, 0x1f, 0x1d, 0xad, 0x97,
	0x10, 0x80, 0x8f, 0x8f, 0x5f, 0x9c, 0xfd, 0x78, 0xbc, 0xee, 0x45, 0x7f, 0x7a, 0xe0, 0xdb, 0x70,
	0xd1, 0x57, 0x50, 0x21, 0x49, 0xe2, 0x72, 0x41, 0x9f, 0xe6, 0xd2, 0xeb, 0x27, 0x89, 0x5e, 0x3e,
	0x24, 0x49, 0xd0, 0x0e, 0xf8, 0x92, 0xa6, 0xe2, 0x35, 0x75, 0xe9, 0xdc, 0xbb, 0x41, 0xc5, 0x46,
	0xa9, 0x73, 0xb2, 0xb4, 0xcd, 0x3d, 0xa8, 0xf4, 0x93, 0x04, 0x7d, 0x53, 0x6c, 0x70, 0xbb, 0xe9,
	0xef, 0xaf, 0x9a, 0x5d, 0xaf, 0x6c, 0xb7, 0xcb, 0x37, 0x3b, 0xe0, 0x5b, 0x47, 0xfa, 0xa1, 0x5e,
	0xdb, 0x35, 0x9c, 0x7e, 0x50, 0xd5, 0x25, 0x79, 0xb2, 0xe5, 0x9e, 0x80, 0x9e, 0x70, 0xd4, 0x84,
	0xfa, 0xa0, 0xff, 0x7d, 0xff, 0xf4, 0xf0, 0x78, 0xbd, 0x84, 0x1a, 0x50, 0x3b, 0x3c, 0x39, 0xc3,
	0x47, 0xeb, 0xde, 0xe0, 0xd7, 0xb7, 0xef, 0x3b, 0xa5, 0x77, 0xef, 0x3b, 0xa5, 0xb7, 0x1f, 0x3a,
	0xde, 0xbb, 0x0f, 0x1d, 0xef, 0xdf, 0x0f, 0x1d, 0xef, 0xf7, 0x8f, 0x9d, 0xd2, 0xbb, 0x8f, 0x9d,
	0xd2, 0x3f, 0x1f, 0x3b, 0x25, 0xd8, 0x8a, 0x45, 0xda, 0x9b, 0xcc, 0xc9, 0x15, 0x65, 0xbd, 0x2b,
	0x46, 0x39, 0x95, 0xf1, 0x84, 0x30, 0x6e, 0x7f, 0x70, 0x5c, 0x9c, 0xaf, 0x9e, 0x8d, 0x99, 0x2a,
	0x48, 0xb1, 0x48, 0x77, 0x32, 0xc1, 0xf2, 0x5c, 0xf0, 0x9c, 0x12, 0x19, 0x4f, 0x76, 0x56, 0xcc,
	0x76, 0xec, 0x2f, 0x92, 0x35, 0x1b, 0xf9, 0x46, 0xda, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfa,
	0x64, 0xf3, 0x0c, 0x5c, 0x09, 0x00, 0x00,
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsZone != nil {
		{
			size, err := m.ConsZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AutoGenZone {
		i--
		if m.AutoGenZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ZoneTemplate != nil {
		{
			size, err := m.ZoneTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Sync != nil {
		{
			size, err := m.Sync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Alloc != nil {
		{
			size, err := m.Alloc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Attachable {
		i--
		if m.Attachable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BlockBatch != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.BlockBatch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoGen {
		i--
		if m.AutoGen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Conf != nil {
		{
			size, err := m.Conf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Property) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != nil {
		{
			size := m.V.Size()
			i -= size
			if _, err := m.V.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.K) > 0 {
		i -= len(m.K)
		copy(dAtA[i:], m.K)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.K)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Property_I32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_I32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNetConf(dAtA, i, uint64(m.I32))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Property_I64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_I64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNetConf(dAtA, i, uint64(m.I64))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *Property_U32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_U32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNetConf(dAtA, i, uint64(m.U32))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Property_U64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_U64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintNetConf(dAtA, i, uint64(m.U64))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *Property_Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *Property_Str) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_Str) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Str)
	copy(dAtA[i:], m.Str)
	i = encodeVarintNetConf(dAtA, i, uint64(len(m.Str)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *Property_Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bytes != nil {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Property_IntArr_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_IntArr_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IntArr != nil {
		{
			size, err := m.IntArr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Property_StrArr_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_StrArr_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StrArr != nil {
		{
			size, err := m.StrArr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Property_StrArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property_StrArr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_StrArr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ss) > 0 {
		for iNdEx := len(m.Ss) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ss[iNdEx])
			copy(dAtA[i:], m.Ss[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Ss[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Property_IntArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property_IntArr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property_IntArr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Is) > 0 {
		dAtA9 := make([]byte, len(m.Is)*10)
		var j8 int
		for _, num1 := range m.Is {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintNetConf(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Entrypoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entrypoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entrypoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seeds) > 0 {
		for iNdEx := len(m.Seeds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Seeds[iNdEx])
			copy(dAtA[i:], m.Seeds[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Seeds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Linkers) > 0 {
		for iNdEx := len(m.Linkers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Linkers[iNdEx])
			copy(dAtA[i:], m.Linkers[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Linkers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.InitialMaster {
		i--
		if m.InitialMaster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Coordinator {
		i--
		if m.Coordinator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTick != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.TimeoutTick))
		i--
		dAtA[i] = 0x18
	}
	if m.HeartbeatTick != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.HeartbeatTick))
		i--
		dAtA[i] = 0x10
	}
	if m.TickInterval != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.TickInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BalanceAlloc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceAlloc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceAlloc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fan != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.Fan))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChordAlloc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChordAlloc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChordAlloc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Allocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Allocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Alloc != nil {
		{
			size := m.Alloc.Size()
			i -= size
			if _, err := m.Alloc.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaxPeerNum != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.MaxPeerNum))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCoordinatorNum != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.MaxCoordinatorNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Allocator_Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocator_Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EndorseTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndorseTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndorseTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardPath) > 0 {
		for iNdEx := len(m.ForwardPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ForwardPath[iNdEx])
			copy(dAtA[i:], m.ForwardPath[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.ForwardPath[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Endorser) > 0 {
		i -= len(m.Endorser)
		copy(dAtA[i:], m.Endorser)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Endorser)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposeTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardPath) > 0 {
		for iNdEx := len(m.ForwardPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ForwardPath[iNdEx])
			copy(dAtA[i:], m.ForwardPath[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.ForwardPath[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintNetConf(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size := m.Update.Size()
			i -= size
			if _, err := m.Update.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetUpdate_Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetUpdate_Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Zone != nil {
		{
			size, err := m.Zone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NetUpdate_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetUpdate_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DomainOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Op != 0 {
		i = encodeVarintNetConf(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZoneOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneOp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneOp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		{
			size := m.Op.Size()
			i -= size
			if _, err := m.Op.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneOp_Add_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneOp_Add_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Add != nil {
		{
			size, err := m.Add.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ZoneOp_Remove_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneOp_Remove_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Remove != nil {
		{
			size, err := m.Remove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetConf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ZoneOp_Add) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneOp_Add) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneOp_Add) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneOp_Remove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneOp_Remove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneOp_Remove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintNetConf(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetConf(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetConf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}

func (m *NetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	if m.Sync != nil {
		l = m.Sync.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	if m.ZoneTemplate != nil {
		l = m.ZoneTemplate.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	if m.AutoGenZone {
		n += 2
	}
	if m.ConsZone != nil {
		l = m.ConsZone.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}

func (m *ZoneConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockBatch != 0 {
		n += 1 + sovNetConf(uint64(m.BlockBatch))
	}
	if m.Attachable {
		n += 2
	}
	if m.Alloc != nil {
		l = m.Alloc.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}

func (m *Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	if m.Conf != nil {
		l = m.Conf.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	if m.AutoGen {
		n += 2
	}
	return n
}

func (m *PermissionSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *ZoneProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *Property) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if m.V != nil {
		n += m.V.Size()
	}
	return n
}

func (m *Property_I32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovNetConf(uint64(m.I32))
	return n
}
func (m *Property_I64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovNetConf(uint64(m.I64))
	return n
}
func (m *Property_U32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovNetConf(uint64(m.U32))
	return n
}
func (m *Property_U64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovNetConf(uint64(m.U64))
	return n
}
func (m *Property_Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Property_Str) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovNetConf(uint64(l))
	return n
}
func (m *Property_Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != nil {
		l = len(m.Bytes)
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *Property_IntArr_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntArr != nil {
		l = m.IntArr.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *Property_StrArr_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrArr != nil {
		l = m.StrArr.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *Property_StrArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ss) > 0 {
		for _, s := range m.Ss {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *Property_IntArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Is) > 0 {
		l = 0
		for _, e := range m.Is {
			l += sovNetConf(uint64(e))
		}
		n += 1 + sovNetConf(uint64(l)) + l
	}
	return n
}

func (m *Entrypoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if m.Coordinator {
		n += 2
	}
	if m.InitialMaster {
		n += 2
	}
	if len(m.Linkers) > 0 {
		for _, s := range m.Linkers {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	if len(m.Seeds) > 0 {
		for _, s := range m.Seeds {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *SyncConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TickInterval != 0 {
		n += 1 + sovNetConf(uint64(m.TickInterval))
	}
	if m.HeartbeatTick != 0 {
		n += 1 + sovNetConf(uint64(m.HeartbeatTick))
	}
	if m.TimeoutTick != 0 {
		n += 1 + sovNetConf(uint64(m.TimeoutTick))
	}
	return n
}

func (m *BalanceAlloc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fan != 0 {
		n += 1 + sovNetConf(uint64(m.Fan))
	}
	return n
}

func (m *ChordAlloc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Allocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovNetConf(uint64(m.Type))
	}
	if m.MaxCoordinatorNum != 0 {
		n += 1 + sovNetConf(uint64(m.MaxCoordinatorNum))
	}
	if m.MaxPeerNum != 0 {
		n += 1 + sovNetConf(uint64(m.MaxPeerNum))
	}
	if m.Alloc != nil {
		n += m.Alloc.Size()
	}
	return n
}

func (m *Allocator_Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *EndorseTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	l = len(m.Endorser)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if len(m.ForwardPath) > 0 {
		for _, s := range m.ForwardPath {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *ProposeTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovNetConf(uint64(l))
	}
	if len(m.ForwardPath) > 0 {
		for _, s := range m.ForwardPath {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *NetUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		n += m.Update.Size()
	}
	return n
}

func (m *NetUpdate_Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zone != nil {
		l = m.Zone.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *NetUpdate_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *DomainOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovNetConf(uint64(m.Op))
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *ZoneOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	return n
}

func (m *ZoneOp_Add_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Add != nil {
		l = m.Add.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *ZoneOp_Remove_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovNetConf(uint64(l))
	}
	return n
}
func (m *ZoneOp_Add) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func (m *ZoneOp_Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovNetConf(uint64(l))
		}
	}
	return n
}

func sovNetConf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetConf(x uint64) (n int) {
	return sovNetConf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &Domain{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sync == nil {
				m.Sync = &SyncConf{}
			}
			if err := m.Sync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZoneTemplate == nil {
				m.ZoneTemplate = &ZoneConf{}
			}
			if err := m.ZoneTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoGenZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoGenZone = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsZone == nil {
				m.ConsZone = &ZoneConf{}
			}
			if err := m.ConsZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBatch", wireType)
			}
			m.BlockBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockBatch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attachable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alloc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alloc == nil {
				m.Alloc = &Allocator{}
			}
			if err := m.Alloc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conf == nil {
				m.Conf = &ZoneConf{}
			}
			if err := m.Conf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoGen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoGen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &Domain{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.V = &Property_I32{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.V = &Property_I64{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.V = &Property_U32{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.V = &Property_U64{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.V = &Property_Bool{b}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = &Property_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.V = &Property_Bytes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Property_IntArr{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.V = &Property_IntArr_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrArr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Property_StrArr{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.V = &Property_StrArr_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property_StrArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ss = append(m.Ss, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property_IntArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetConf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Is = append(m.Is, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetConf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNetConf
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNetConf
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Is) == 0 {
					m.Is = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetConf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Is = append(m.Is, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Is", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entrypoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entrypoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entrypoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coordinator = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMaster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialMaster = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linkers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Linkers = append(m.Linkers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seeds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seeds = append(m.Seeds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickInterval", wireType)
			}
			m.TickInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTick", wireType)
			}
			m.HeartbeatTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTick", wireType)
			}
			m.TimeoutTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceAlloc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceAlloc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceAlloc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			m.Fan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChordAlloc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChordAlloc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChordAlloc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Allocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AllocType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCoordinatorNum", wireType)
			}
			m.MaxCoordinatorNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCoordinatorNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPeerNum", wireType)
			}
			m.MaxPeerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPeerNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BalanceAlloc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Alloc = &Allocator_Balance{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndorseTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndorseTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndorseTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endorser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardPath = append(m.ForwardPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardPath = append(m.ForwardPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ZoneOp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &NetUpdate_Zone{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainOp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &NetUpdate_Domain{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= DomainOp_Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ZoneOp_Add{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ZoneOp_Add_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ZoneOp_Remove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ZoneOp_Remove_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneOp_Add) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Add: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Add: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, &ZoneProperties{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneOp_Remove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Remove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Remove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetConf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetConf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetConf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetConf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetConf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetConf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetConf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetConf = fmt.Errorf("proto: unexpected end of group")
)
