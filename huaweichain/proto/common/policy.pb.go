// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/policy.proto

package common

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Operator int32

const (
	AND Operator = 0
	OR  Operator = 1
)

var Operator_name = map[int32]string{
	0: "AND",
	1: "OR",
}

var Operator_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x Operator) String() string {
	return proto.EnumName(Operator_name, int32(x))
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e7bd80df9edbf49, []int{0}
}

type Policy struct {
	// Types that are valid to be assigned to Ast:
	//	*Policy_NonTerminal
	//	*Policy_Terminal
	Ast isPolicy_Ast `protobuf_oneof:"ast"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7bd80df9edbf49, []int{0}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

type isPolicy_Ast interface {
	isPolicy_Ast()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Policy_NonTerminal struct {
	NonTerminal *NonTerminal `protobuf:"bytes,1,opt,name=non_terminal,json=nonTerminal,proto3,oneof" json:"non_terminal,omitempty"`
}
type Policy_Terminal struct {
	Terminal *Terminal `protobuf:"bytes,2,opt,name=terminal,proto3,oneof" json:"terminal,omitempty"`
}

func (*Policy_NonTerminal) isPolicy_Ast() {}
func (*Policy_Terminal) isPolicy_Ast()    {}

func (m *Policy) GetAst() isPolicy_Ast {
	if m != nil {
		return m.Ast
	}
	return nil
}

func (m *Policy) GetNonTerminal() *NonTerminal {
	if x, ok := m.GetAst().(*Policy_NonTerminal); ok {
		return x.NonTerminal
	}
	return nil
}

func (m *Policy) GetTerminal() *Terminal {
	if x, ok := m.GetAst().(*Policy_Terminal); ok {
		return x.Terminal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Policy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Policy_NonTerminal)(nil),
		(*Policy_Terminal)(nil),
	}
}

type NonTerminal struct {
	Op         Operator `protobuf:"varint,1,opt,name=op,proto3,enum=common.Operator" json:"op,omitempty"`
	LeftToken  *Policy  `protobuf:"bytes,2,opt,name=left_token,json=leftToken,proto3" json:"left_token,omitempty"`
	RightToken *Policy  `protobuf:"bytes,3,opt,name=right_token,json=rightToken,proto3" json:"right_token,omitempty"`
}

func (m *NonTerminal) Reset()         { *m = NonTerminal{} }
func (m *NonTerminal) String() string { return proto.CompactTextString(m) }
func (*NonTerminal) ProtoMessage()    {}
func (*NonTerminal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7bd80df9edbf49, []int{1}
}
func (m *NonTerminal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonTerminal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonTerminal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonTerminal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonTerminal.Merge(m, src)
}
func (m *NonTerminal) XXX_Size() int {
	return m.Size()
}
func (m *NonTerminal) XXX_DiscardUnknown() {
	xxx_messageInfo_NonTerminal.DiscardUnknown(m)
}

var xxx_messageInfo_NonTerminal proto.InternalMessageInfo

type Terminal struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Terminal) Reset()         { *m = Terminal{} }
func (m *Terminal) String() string { return proto.CompactTextString(m) }
func (*Terminal) ProtoMessage()    {}
func (*Terminal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7bd80df9edbf49, []int{2}
}
func (m *Terminal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Terminal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Terminal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Terminal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Terminal.Merge(m, src)
}
func (m *Terminal) XXX_Size() int {
	return m.Size()
}
func (m *Terminal) XXX_DiscardUnknown() {
	xxx_messageInfo_Terminal.DiscardUnknown(m)
}

var xxx_messageInfo_Terminal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.Operator", Operator_name, Operator_value)
	proto.RegisterType((*Policy)(nil), "common.Policy")
	proto.RegisterType((*NonTerminal)(nil), "common.NonTerminal")
	proto.RegisterType((*Terminal)(nil), "common.Terminal")
}

func init() { proto.RegisterFile("common/policy.proto", fileDescriptor_7e7bd80df9edbf49) }

var fileDescriptor_7e7bd80df9edbf49 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x6b, 0xea, 0x40,
	0x10, 0xc7, 0xb3, 0x11, 0xf3, 0x74, 0xf2, 0x10, 0x59, 0x3d, 0x3c, 0xde, 0x83, 0x45, 0x7c, 0x97,
	0x52, 0x68, 0x02, 0x2d, 0x85, 0x5e, 0x2b, 0x3d, 0xf4, 0xa4, 0x25, 0x78, 0xea, 0x45, 0xd2, 0xb0,
	0x4d, 0x96, 0x9a, 0x9d, 0xb0, 0xd9, 0x22, 0x42, 0xbf, 0x43, 0xfb, 0xb1, 0x3c, 0x7a, 0xec, 0xb1,
	0xea, 0x17, 0x29, 0xd9, 0x35, 0xea, 0xa1, 0xb7, 0xcc, 0xce, 0xef, 0x37, 0xf3, 0x0f, 0x03, 0xbd,
	0x04, 0xf3, 0x1c, 0x65, 0x58, 0xe0, 0x5c, 0x24, 0xcb, 0xa0, 0x50, 0xa8, 0x91, 0x7a, 0xf6, 0xf1,
	0x6f, 0x3f, 0xc5, 0x14, 0xcd, 0x53, 0x58, 0x7d, 0xd9, 0xee, 0x70, 0x09, 0xde, 0x83, 0xa1, 0xe9,
	0x0d, 0xfc, 0x96, 0x28, 0x67, 0x9a, 0xab, 0x5c, 0xc8, 0x78, 0xfe, 0x87, 0x0c, 0xc8, 0x99, 0x7f,
	0xd9, 0x0b, 0xac, 0x1e, 0x8c, 0x51, 0x4e, 0xf7, 0xad, 0x7b, 0x27, 0xf2, 0xe5, 0xb1, 0xa4, 0x01,
	0xb4, 0x0e, 0x96, 0x6b, 0xac, 0x6e, 0x6d, 0x9d, 0x28, 0x07, 0x66, 0xd4, 0x84, 0x46, 0x5c, 0xea,
	0xe1, 0x3b, 0x01, 0xff, 0x64, 0x2a, 0x1d, 0x80, 0x8b, 0x85, 0x59, 0xdb, 0x39, 0x0e, 0x98, 0x14,
	0x5c, 0xc5, 0x1a, 0x55, 0xe4, 0x62, 0x41, 0x2f, 0x00, 0xe6, 0xfc, 0x59, 0xcf, 0x34, 0xbe, 0x70,
	0xb9, 0x5f, 0xd5, 0xa9, 0x49, 0xfb, 0x1b, 0x51, 0xbb, 0x22, 0xa6, 0x15, 0x40, 0x43, 0xf0, 0x95,
	0x48, 0xb3, 0x9a, 0x6f, 0xfc, 0xc8, 0x83, 0x41, 0x8c, 0x30, 0x1c, 0x40, 0xeb, 0x90, 0xa6, 0x0f,
	0x4d, 0xab, 0x55, 0x81, 0xda, 0x91, 0x2d, 0xce, 0xff, 0x41, 0xab, 0x4e, 0x44, 0x7f, 0x41, 0xe3,
	0x76, 0x7c, 0xd7, 0x75, 0xa8, 0x07, 0xee, 0x24, 0xea, 0x92, 0xd1, 0xdb, 0x6a, 0xc3, 0x9c, 0xf5,
	0x86, 0x39, 0xab, 0x2d, 0x23, 0xeb, 0x2d, 0x23, 0x5f, 0x5b, 0x46, 0x3e, 0x76, 0xcc, 0x59, 0xef,
	0x98, 0xf3, 0xb9, 0x63, 0x0e, 0xfc, 0x4f, 0x30, 0x0f, 0xb2, 0xd7, 0x78, 0xc1, 0x45, 0xb0, 0x10,
	0x5c, 0x72, 0x95, 0x64, 0xb1, 0x90, 0xf6, 0x16, 0xfb, 0x60, 0x8f, 0xd7, 0xa9, 0xd0, 0x35, 0x94,
	0x60, 0x1e, 0x16, 0x28, 0xca, 0x12, 0x65, 0xc9, 0x63, 0x95, 0x64, 0xe1, 0x89, 0x16, 0xda, 0x6b,
	0x5a, 0xed, 0xc9, 0x33, 0xd5, 0xd5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xbc, 0x26, 0x6e,
	0x05, 0x02, 0x00, 0x00,
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ast != nil {
		{
			size := m.Ast.Size()
			i -= size
			if _, err := m.Ast.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Policy_NonTerminal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy_NonTerminal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonTerminal != nil {
		{
			size, err := m.NonTerminal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Policy_Terminal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy_Terminal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terminal != nil {
		{
			size, err := m.Terminal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NonTerminal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonTerminal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonTerminal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RightToken != nil {
		{
			size, err := m.RightToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LeftToken != nil {
		{
			size, err := m.LeftToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintPolicy(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Terminal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Terminal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Terminal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPolicy(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ast != nil {
		n += m.Ast.Size()
	}
	return n
}

func (m *Policy_NonTerminal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonTerminal != nil {
		l = m.NonTerminal.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}
func (m *Policy_Terminal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terminal != nil {
		l = m.Terminal.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}
func (m *NonTerminal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovPolicy(uint64(m.Op))
	}
	if m.LeftToken != nil {
		l = m.LeftToken.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.RightToken != nil {
		l = m.RightToken.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func (m *Terminal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func sovPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicy(x uint64) (n int) {
	return sovPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonTerminal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NonTerminal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ast = &Policy_NonTerminal{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Terminal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ast = &Policy_Terminal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NonTerminal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonTerminal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonTerminal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftToken == nil {
				m.LeftToken = &Policy{}
			}
			if err := m.LeftToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightToken == nil {
				m.RightToken = &Policy{}
			}
			if err := m.RightToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Terminal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terminal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terminal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicy = fmt.Errorf("proto: unexpected end of group")
)
