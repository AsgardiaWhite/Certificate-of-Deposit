// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consensus/raft_conf.proto

package consensus

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitialState struct {
	Group            string       `protobuf:"bytes,13,opt,name=group,proto3" json:"group,omitempty"`
	Consenters       []*Consenter `protobuf:"bytes,1,rep,name=consenters,proto3" json:"consenters,omitempty"`
	Learners         []string     `protobuf:"bytes,2,rep,name=learners,proto3" json:"learners,omitempty"`
	Safe             bool         `protobuf:"varint,14,opt,name=safe,proto3" json:"safe,omitempty"`
	Tick             uint32       `protobuf:"varint,3,opt,name=tick,proto3" json:"tick,omitempty"`
	Heartbeat        uint32       `protobuf:"varint,4,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	Election         uint32       `protobuf:"varint,5,opt,name=election,proto3" json:"election,omitempty"`
	Unreachable      uint32       `protobuf:"varint,8,opt,name=unreachable,proto3" json:"unreachable,omitempty"`
	SnapThreshold    uint64       `protobuf:"varint,6,opt,name=snapThreshold,proto3" json:"snapThreshold,omitempty"`
	MaxBatchSize     uint64       `protobuf:"varint,7,opt,name=maxBatchSize,proto3" json:"maxBatchSize,omitempty"`
	CheckQuorum      bool         `protobuf:"varint,10,opt,name=checkQuorum,proto3" json:"checkQuorum,omitempty"`
	PreVote          bool         `protobuf:"varint,11,opt,name=preVote,proto3" json:"preVote,omitempty"`
	DisableForward   bool         `protobuf:"varint,12,opt,name=disableForward,proto3" json:"disableForward,omitempty"`
	BehindThreshold  uint32       `protobuf:"varint,15,opt,name=behindThreshold,proto3" json:"behindThreshold,omitempty"`
	CurrentConfIndex uint64       `protobuf:"varint,9,opt,name=currentConfIndex,proto3" json:"currentConfIndex,omitempty"`
	TermRoundBound   uint32       `protobuf:"varint,16,opt,name=term_round_bound,json=termRoundBound,proto3" json:"term_round_bound,omitempty"`
}

func (m *InitialState) Reset()         { *m = InitialState{} }
func (m *InitialState) String() string { return proto.CompactTextString(m) }
func (*InitialState) ProtoMessage()    {}
func (*InitialState) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b0c8efc71103c0, []int{0}
}
func (m *InitialState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitialState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitialState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitialState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialState.Merge(m, src)
}
func (m *InitialState) XXX_Size() int {
	return m.Size()
}
func (m *InitialState) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialState.DiscardUnknown(m)
}

var xxx_messageInfo_InitialState proto.InternalMessageInfo

type NodeCert struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *NodeCert) Reset()         { *m = NodeCert{} }
func (m *NodeCert) String() string { return proto.CompactTextString(m) }
func (*NodeCert) ProtoMessage()    {}
func (*NodeCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b0c8efc71103c0, []int{1}
}
func (m *NodeCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCert.Merge(m, src)
}
func (m *NodeCert) XXX_Size() int {
	return m.Size()
}
func (m *NodeCert) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCert.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCert proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InitialState)(nil), "consensus.InitialState")
	proto.RegisterType((*NodeCert)(nil), "consensus.NodeCert")
}

func init() { proto.RegisterFile("consensus/raft_conf.proto", fileDescriptor_30b0c8efc71103c0) }

var fileDescriptor_30b0c8efc71103c0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6a, 0x1b, 0x3f,
	0x10, 0xc7, 0x2d, 0xdb, 0x49, 0x6c, 0xf9, 0x4f, 0x8c, 0x30, 0x3f, 0xf4, 0x33, 0x65, 0x59, 0x4c,
	0x29, 0x4b, 0x0b, 0x6b, 0x68, 0x7b, 0xe8, 0xd9, 0x86, 0x42, 0x2e, 0x85, 0x6e, 0x4a, 0x0f, 0xbd,
	0x18, 0x59, 0x3b, 0xf6, 0x8a, 0xd8, 0x92, 0x99, 0xd5, 0xe2, 0xd0, 0x17, 0xe8, 0xb5, 0x8f, 0xd1,
	0x47, 0xc9, 0xd1, 0xc7, 0x1e, 0x1b, 0xfb, 0x45, 0x8a, 0xb4, 0xf8, 0x4f, 0xd2, 0x8b, 0x98, 0xf9,
	0x7c, 0xbf, 0x33, 0x1a, 0xa1, 0xa1, 0xff, 0x4b, 0xa3, 0x73, 0xd0, 0x79, 0x91, 0x8f, 0x50, 0xcc,
	0xed, 0x54, 0x1a, 0x3d, 0x8f, 0xd7, 0x68, 0xac, 0x61, 0xcd, 0xa3, 0x34, 0xe8, 0x2f, 0xcc, 0xc2,
	0x78, 0x3a, 0x72, 0x51, 0x69, 0x18, 0xfc, 0x77, 0xaa, 0x75, 0x65, 0x6a, 0x51, 0xf2, 0xe1, 0xaf,
	0x3a, 0x6d, 0xdf, 0x68, 0x65, 0x95, 0x58, 0xde, 0x5a, 0x61, 0x81, 0xf5, 0xe9, 0xc5, 0x02, 0x4d,
	0xb1, 0xe6, 0x9d, 0x90, 0x44, 0xcd, 0xa4, 0x4c, 0xd8, 0x7b, 0x4a, 0xcb, 0x06, 0x16, 0x30, 0xe7,
	0x24, 0xac, 0x45, 0xad, 0xb7, 0xfd, 0xf8, 0xd8, 0x33, 0x9e, 0x1c, 0xc4, 0xe4, 0xcc, 0xc7, 0x06,
	0xb4, 0xb1, 0x04, 0x81, 0xda, 0xd5, 0x54, 0xc3, 0x5a, 0xd4, 0x4c, 0x8e, 0x39, 0x63, 0xb4, 0x9e,
	0x8b, 0x39, 0xf0, 0x6e, 0x48, 0xa2, 0x46, 0xe2, 0x63, 0xc7, 0xac, 0x92, 0x77, 0xbc, 0x16, 0x92,
	0xa8, 0x93, 0xf8, 0x98, 0xbd, 0xa0, 0xcd, 0x0c, 0x04, 0xda, 0x19, 0x08, 0xcb, 0xeb, 0x5e, 0x38,
	0x01, 0x77, 0x03, 0x2c, 0x41, 0x5a, 0x65, 0x34, 0xbf, 0xf0, 0xe2, 0x31, 0x67, 0x21, 0x6d, 0x15,
	0x1a, 0x41, 0xc8, 0x4c, 0xcc, 0x96, 0xc0, 0x1b, 0x5e, 0x3e, 0x47, 0xec, 0x25, 0xed, 0xe4, 0x5a,
	0xac, 0xbf, 0x64, 0x08, 0x79, 0x66, 0x96, 0x29, 0xbf, 0x0c, 0x49, 0x54, 0x4f, 0x9e, 0x42, 0x36,
	0xa4, 0xed, 0x95, 0xb8, 0x1f, 0x0b, 0x2b, 0xb3, 0x5b, 0xf5, 0x1d, 0xf8, 0x95, 0x37, 0x3d, 0x61,
	0xee, 0x2e, 0x99, 0x81, 0xbc, 0xfb, 0x5c, 0x18, 0x2c, 0x56, 0x9c, 0xfa, 0x47, 0x9d, 0x23, 0xc6,
	0xe9, 0xd5, 0x1a, 0xe1, 0xab, 0xb1, 0xc0, 0x5b, 0x5e, 0x3d, 0xa4, 0xec, 0x15, 0xed, 0xa6, 0x2a,
	0x77, 0x03, 0x7d, 0x34, 0xb8, 0x11, 0x98, 0xf2, 0xb6, 0x37, 0x3c, 0xa3, 0x2c, 0xa2, 0xd7, 0x33,
	0xc8, 0x94, 0x4e, 0x4f, 0xf3, 0x5e, 0xfb, 0x37, 0x3d, 0xc7, 0xec, 0x35, 0xed, 0xc9, 0x02, 0x11,
	0xb4, 0x9d, 0x18, 0x3d, 0xbf, 0xd1, 0x29, 0xdc, 0xf3, 0xa6, 0x9f, 0xfa, 0x1f, 0xce, 0x22, 0xda,
	0xb3, 0x80, 0xab, 0x29, 0x9a, 0x42, 0xa7, 0xd3, 0x99, 0x3b, 0x79, 0xcf, 0xb7, 0xed, 0x3a, 0x9e,
	0x38, 0x30, 0x76, 0xc7, 0x30, 0xa6, 0x8d, 0x4f, 0x26, 0x85, 0x09, 0xa0, 0x65, 0x5d, 0x5a, 0x55,
	0x29, 0x27, 0x7e, 0x45, 0xaa, 0x2a, 0x75, 0x3f, 0x27, 0x01, 0x2d, 0xaf, 0x86, 0x24, 0x6a, 0x27,
	0x3e, 0x1e, 0xff, 0x20, 0x0f, 0x8f, 0x41, 0x65, 0xfb, 0x18, 0x54, 0x1e, 0x76, 0x01, 0xd9, 0xee,
	0x02, 0xf2, 0x67, 0x17, 0x90, 0x9f, 0xfb, 0xa0, 0xb2, 0xdd, 0x07, 0x95, 0xdf, 0xfb, 0xa0, 0x42,
	0xdf, 0x48, 0xb3, 0x8a, 0xb3, 0x42, 0x6c, 0x40, 0xc5, 0x1b, 0x05, 0x1a, 0x50, 0x66, 0x42, 0xe9,
	0x72, 0x37, 0xcf, 0xd6, 0xcb, 0xad, 0xfb, 0xb7, 0x0f, 0x0b, 0x65, 0x0f, 0x66, 0x69, 0x56, 0xa3,
	0xb5, 0x51, 0x79, 0xee, 0x2c, 0x02, 0x65, 0x36, 0x3a, 0x2b, 0x1f, 0x95, 0xdb, 0x7f, 0x2c, 0x9f,
	0x5d, 0x7a, 0xf0, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x56, 0x52, 0x75, 0x41, 0x03,
	0x00, 0x00,
}

func (m *InitialState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitialState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitialState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TermRoundBound != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.TermRoundBound))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.BehindThreshold != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.BehindThreshold))
		i--
		dAtA[i] = 0x78
	}
	if m.Safe {
		i--
		if m.Safe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintRaftConf(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x6a
	}
	if m.DisableForward {
		i--
		if m.DisableForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.PreVote {
		i--
		if m.PreVote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.CheckQuorum {
		i--
		if m.CheckQuorum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CurrentConfIndex != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.CurrentConfIndex))
		i--
		dAtA[i] = 0x48
	}
	if m.Unreachable != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.Unreachable))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxBatchSize != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.MaxBatchSize))
		i--
		dAtA[i] = 0x38
	}
	if m.SnapThreshold != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.SnapThreshold))
		i--
		dAtA[i] = 0x30
	}
	if m.Election != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.Election))
		i--
		dAtA[i] = 0x28
	}
	if m.Heartbeat != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.Heartbeat))
		i--
		dAtA[i] = 0x20
	}
	if m.Tick != 0 {
		i = encodeVarintRaftConf(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Learners) > 0 {
		for iNdEx := len(m.Learners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Learners[iNdEx])
			copy(dAtA[i:], m.Learners[iNdEx])
			i = encodeVarintRaftConf(dAtA, i, uint64(len(m.Learners[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Consenters) > 0 {
		for iNdEx := len(m.Consenters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Consenters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftConf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintRaftConf(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRaftConf(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftConf(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftConf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitialState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Consenters) > 0 {
		for _, e := range m.Consenters {
			l = e.Size()
			n += 1 + l + sovRaftConf(uint64(l))
		}
	}
	if len(m.Learners) > 0 {
		for _, s := range m.Learners {
			l = len(s)
			n += 1 + l + sovRaftConf(uint64(l))
		}
	}
	if m.Tick != 0 {
		n += 1 + sovRaftConf(uint64(m.Tick))
	}
	if m.Heartbeat != 0 {
		n += 1 + sovRaftConf(uint64(m.Heartbeat))
	}
	if m.Election != 0 {
		n += 1 + sovRaftConf(uint64(m.Election))
	}
	if m.SnapThreshold != 0 {
		n += 1 + sovRaftConf(uint64(m.SnapThreshold))
	}
	if m.MaxBatchSize != 0 {
		n += 1 + sovRaftConf(uint64(m.MaxBatchSize))
	}
	if m.Unreachable != 0 {
		n += 1 + sovRaftConf(uint64(m.Unreachable))
	}
	if m.CurrentConfIndex != 0 {
		n += 1 + sovRaftConf(uint64(m.CurrentConfIndex))
	}
	if m.CheckQuorum {
		n += 2
	}
	if m.PreVote {
		n += 2
	}
	if m.DisableForward {
		n += 2
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovRaftConf(uint64(l))
	}
	if m.Safe {
		n += 2
	}
	if m.BehindThreshold != 0 {
		n += 1 + sovRaftConf(uint64(m.BehindThreshold))
	}
	if m.TermRoundBound != 0 {
		n += 2 + sovRaftConf(uint64(m.TermRoundBound))
	}
	return n
}

func (m *NodeCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRaftConf(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovRaftConf(uint64(l))
	}
	return n
}

func sovRaftConf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftConf(x uint64) (n int) {
	return sovRaftConf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitialState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitialState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitialState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consenters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftConf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consenters = append(m.Consenters, &Consenter{})
			if err := m.Consenters[len(m.Consenters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Learners = append(m.Learners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			m.Heartbeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Heartbeat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Election", wireType)
			}
			m.Election = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Election |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapThreshold", wireType)
			}
			m.SnapThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBatchSize", wireType)
			}
			m.MaxBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unreachable", wireType)
			}
			m.Unreachable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unreachable |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentConfIndex", wireType)
			}
			m.CurrentConfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentConfIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckQuorum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckQuorum = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreVote = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableForward = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Safe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Safe = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BehindThreshold", wireType)
			}
			m.BehindThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BehindThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermRoundBound", wireType)
			}
			m.TermRoundBound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermRoundBound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftConf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftConf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftConf
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftConf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftConf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftConf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftConf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftConf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftConf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftConf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftConf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftConf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftConf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftConf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftConf = fmt.Errorf("proto: unexpected end of group")
)
