// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodeservice/transaction.proto

package nodeservice

import (
	context "context"
	fmt "fmt"
	common "git.huawei.com/huaweichain/proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("nodeservice/transaction.proto", fileDescriptor_752afbad3e3b180d) }

var fileDescriptor_752afbad3e3b180d = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xa1, 0x4e, 0x04, 0x31,
	0x10, 0x86, 0x5b, 0x83, 0x28, 0x82, 0xd0, 0x1c, 0x66, 0x13, 0x2a, 0x50, 0xa7, 0x5a, 0x02, 0x0e,
	0x1c, 0x09, 0x12, 0xc3, 0xa1, 0x70, 0x43, 0x6f, 0xb2, 0x5b, 0xd1, 0xce, 0xa5, 0x2d, 0xec, 0x1b,
	0xa0, 0x71, 0xbc, 0xd2, 0xc9, 0x95, 0x48, 0x6e, 0xf7, 0x45, 0xc8, 0x5d, 0x21, 0x34, 0x04, 0x71,
	0x6e, 0xf2, 0xcd, 0xff, 0xfd, 0xe2, 0x17, 0xa7, 0x81, 0x96, 0x98, 0x30, 0xbe, 0x38, 0x8b, 0x26,
	0x47, 0x08, 0x09, 0x6c, 0x76, 0x14, 0xf4, 0x2a, 0x52, 0x26, 0x79, 0x58, 0xbd, 0x9b, 0x59, 0x4b,
	0x2d, 0xed, 0xb8, 0xd9, 0x5e, 0x25, 0xd2, 0xcc, 0x2c, 0x79, 0x4f, 0xc1, 0x78, 0x4c, 0x09, 0x5a,
	0x2c, 0xf4, 0xe2, 0x9d, 0x8b, 0xe3, 0x87, 0xdf, 0xba, 0x05, 0x86, 0x25, 0x46, 0x79, 0x2d, 0x8e,
	0xb6, 0x57, 0xf5, 0x90, 0x52, 0x17, 0x5f, 0xdf, 0x43, 0x7f, 0x57, 0x2a, 0x9a, 0x7f, 0xd8, 0x19,
	0x93, 0xb7, 0xe2, 0xe4, 0x8f, 0xbc, 0xc8, 0x11, 0xc1, 0xef, 0x5f, 0x31, 0xe7, 0xe7, 0xfc, 0xe6,
	0x95, 0xaf, 0x37, 0x8a, 0x0d, 0x1b, 0xc5, 0xd6, 0xa3, 0xe2, 0xc3, 0xa8, 0xf8, 0xe7, 0xa8, 0xf8,
	0xdb, 0xa4, 0xd8, 0x30, 0x29, 0xf6, 0x31, 0x29, 0x26, 0xe6, 0x96, 0xbc, 0xee, 0x9e, 0xa1, 0x47,
	0xa7, 0x7b, 0x87, 0x01, 0xa3, 0xed, 0xc0, 0x7d, 0x6f, 0xa2, 0xab, 0x49, 0x1e, 0xaf, 0x5a, 0x97,
	0x7f, 0x92, 0x96, 0xbc, 0x59, 0x91, 0x4b, 0x89, 0x42, 0x42, 0x88, 0xb6, 0x33, 0x95, 0x6b, 0xca,
	0x6e, 0x95, 0xfb, 0x74, 0xb0, 0x43, 0x97, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x15, 0x91,
	0x14, 0x83, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionSenderClient is the client API for TransactionSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionSenderClient interface {
	// send transaction to node for consensus and commit.
	// The payload of RawMessage in request is Transaction in common.transaction.proto.
	// The payload in return is Response in message.proto.
	SendTransaction(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	SendTransactionStream(ctx context.Context, opts ...grpc.CallOption) (TransactionSender_SendTransactionStreamClient, error)
}

type transactionSenderClient struct {
	cc *grpc.ClientConn
}

func NewTransactionSenderClient(cc *grpc.ClientConn) TransactionSenderClient {
	return &transactionSenderClient{cc}
}

func (c *transactionSenderClient) SendTransaction(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.TransactionSender/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionSenderClient) SendTransactionStream(ctx context.Context, opts ...grpc.CallOption) (TransactionSender_SendTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionSender_serviceDesc.Streams[0], "/nodeservice.TransactionSender/SendTransactionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionSenderSendTransactionStreamClient{stream}
	return x, nil
}

type TransactionSender_SendTransactionStreamClient interface {
	Send(*common.RawMessage) error
	Recv() (*common.RawMessage, error)
	grpc.ClientStream
}

type transactionSenderSendTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *transactionSenderSendTransactionStreamClient) Send(m *common.RawMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transactionSenderSendTransactionStreamClient) Recv() (*common.RawMessage, error) {
	m := new(common.RawMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionSenderServer is the server API for TransactionSender service.
type TransactionSenderServer interface {
	// send transaction to node for consensus and commit.
	// The payload of RawMessage in request is Transaction in common.transaction.proto.
	// The payload in return is Response in message.proto.
	SendTransaction(context.Context, *common.RawMessage) (*common.RawMessage, error)
	SendTransactionStream(TransactionSender_SendTransactionStreamServer) error
}

// UnimplementedTransactionSenderServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionSenderServer struct {
}

func (*UnimplementedTransactionSenderServer) SendTransaction(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTransactionSenderServer) SendTransactionStream(srv TransactionSender_SendTransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTransactionStream not implemented")
}

func RegisterTransactionSenderServer(s *grpc.Server, srv TransactionSenderServer) {
	s.RegisterService(&_TransactionSender_serviceDesc, srv)
}

func _TransactionSender_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionSenderServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.TransactionSender/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionSenderServer).SendTransaction(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionSender_SendTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionSenderServer).SendTransactionStream(&transactionSenderSendTransactionStreamServer{stream})
}

type TransactionSender_SendTransactionStreamServer interface {
	Send(*common.RawMessage) error
	Recv() (*common.RawMessage, error)
	grpc.ServerStream
}

type transactionSenderSendTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *transactionSenderSendTransactionStreamServer) Send(m *common.RawMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transactionSenderSendTransactionStreamServer) Recv() (*common.RawMessage, error) {
	m := new(common.RawMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TransactionSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeservice.TransactionSender",
	HandlerType: (*TransactionSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _TransactionSender_SendTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTransactionStream",
			Handler:       _TransactionSender_SendTransactionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nodeservice/transaction.proto",
}
