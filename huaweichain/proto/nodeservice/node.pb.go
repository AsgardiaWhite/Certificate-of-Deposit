// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodeservice/node.proto

package nodeservice

import (
	context "context"
	fmt "fmt"
	common "git.huawei.com/huaweichain/proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("nodeservice/node.proto", fileDescriptor_7a9c29b436df99e8) }

var fileDescriptor_7a9c29b436df99e8 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xa1, 0x4e, 0xc5, 0x30,
	0x18, 0x85, 0x5b, 0x83, 0xe8, 0x5c, 0x73, 0x83, 0x98, 0xf8, 0x05, 0x0a, 0xd5, 0x26, 0x20, 0x48,
	0x90, 0x08, 0x50, 0x40, 0x02, 0x0e, 0x57, 0x7a, 0xff, 0x74, 0x15, 0xed, 0x7f, 0xd3, 0x0e, 0xf6,
	0x06, 0x68, 0x1e, 0xeb, 0xca, 0x49, 0x24, 0xdb, 0x5e, 0x84, 0x6c, 0x85, 0xa4, 0x02, 0x77, 0xf2,
	0xe5, 0x7c, 0xc9, 0x39, 0xe2, 0x34, 0xd2, 0x1e, 0x33, 0xa6, 0x77, 0x6f, 0x51, 0xaf, 0x59, 0x1d,
	0x12, 0xf5, 0x24, 0x9b, 0x8a, 0xb7, 0x3b, 0x47, 0x8e, 0x36, 0xae, 0xd7, 0x54, 0x2a, 0xed, 0xce,
	0x52, 0x08, 0x14, 0x75, 0xc0, 0x9c, 0x8d, 0xfb, 0x15, 0x2f, 0x6e, 0x45, 0xf3, 0x40, 0x7b, 0x7c,
	0x2e, 0xaa, 0xbc, 0x12, 0xcd, 0x1d, 0xf6, 0x8f, 0xc9, 0xad, 0x30, 0x4b, 0xa9, 0x8a, 0xa4, 0x9e,
	0xcc, 0x70, 0x5f, 0xbc, 0xf6, 0x1f, 0x76, 0xc6, 0x6e, 0x3e, 0xf8, 0x71, 0x02, 0x36, 0x4e, 0xc0,
	0x8e, 0x33, 0xf0, 0x71, 0x06, 0xfe, 0x3d, 0x03, 0xff, 0x5c, 0x80, 0x8d, 0x0b, 0xb0, 0xaf, 0x05,
	0x98, 0x38, 0xb7, 0x14, 0x54, 0xf7, 0x66, 0x06, 0xf4, 0x6a, 0xf0, 0x18, 0x31, 0xd9, 0xce, 0xf8,
	0x58, 0x86, 0xa8, 0xea, 0xc0, 0xcb, 0xb5, 0xf3, 0xfd, 0x5f, 0xd3, 0x52, 0xd0, 0x07, 0xf2, 0x39,
	0x53, 0xcc, 0x68, 0x92, 0xed, 0x74, 0xe5, 0xea, 0xf2, 0xb2, 0x72, 0x5f, 0x4f, 0x36, 0x74, 0xf9,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x91, 0xd2, 0x3e, 0x24, 0x2a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	GetOrgNodes(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) GetOrgNodes(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.NodeService/GetOrgNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	GetOrgNodes(context.Context, *common.RawMessage) (*common.RawMessage, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) GetOrgNodes(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgNodes not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_GetOrgNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetOrgNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.NodeService/GetOrgNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetOrgNodes(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeservice.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgNodes",
			Handler:    _NodeService_GetOrgNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeservice/node.proto",
}
