// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodeservice/consensus.proto

package nodeservice

import (
	context "context"
	fmt "fmt"
	common "git.huawei.com/huaweichain/proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MultiChain is unmarshalled from RawMessage, for communication between nodes.
type MultiChain struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MultiChain) Reset()         { *m = MultiChain{} }
func (m *MultiChain) String() string { return proto.CompactTextString(m) }
func (*MultiChain) ProtoMessage()    {}
func (*MultiChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bb1eaa9b339447, []int{0}
}
func (m *MultiChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiChain.Merge(m, src)
}
func (m *MultiChain) XXX_Size() int {
	return m.Size()
}
func (m *MultiChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiChain.DiscardUnknown(m)
}

var xxx_messageInfo_MultiChain proto.InternalMessageInfo

type GetBlocksResp struct {
	// Types that are valid to be assigned to Type:
	//	*GetBlocksResp_Status
	//	*GetBlocksResp_Block
	Type isGetBlocksResp_Type `protobuf_oneof:"Type"`
}

func (m *GetBlocksResp) Reset()         { *m = GetBlocksResp{} }
func (m *GetBlocksResp) String() string { return proto.CompactTextString(m) }
func (*GetBlocksResp) ProtoMessage()    {}
func (*GetBlocksResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bb1eaa9b339447, []int{1}
}
func (m *GetBlocksResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlocksResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksResp.Merge(m, src)
}
func (m *GetBlocksResp) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksResp proto.InternalMessageInfo

type isGetBlocksResp_Type interface {
	isGetBlocksResp_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetBlocksResp_Status struct {
	Status *common.StatusResponse `protobuf:"bytes,1,opt,name=status,proto3,oneof" json:"status,omitempty"`
}
type GetBlocksResp_Block struct {
	Block *common.Block `protobuf:"bytes,2,opt,name=block,proto3,oneof" json:"block,omitempty"`
}

func (*GetBlocksResp_Status) isGetBlocksResp_Type() {}
func (*GetBlocksResp_Block) isGetBlocksResp_Type()  {}

func (m *GetBlocksResp) GetType() isGetBlocksResp_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GetBlocksResp) GetStatus() *common.StatusResponse {
	if x, ok := m.GetType().(*GetBlocksResp_Status); ok {
		return x.Status
	}
	return nil
}

func (m *GetBlocksResp) GetBlock() *common.Block {
	if x, ok := m.GetType().(*GetBlocksResp_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetBlocksResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetBlocksResp_Status)(nil),
		(*GetBlocksResp_Block)(nil),
	}
}

func init() {
	proto.RegisterType((*MultiChain)(nil), "nodeservice.MultiChain")
	proto.RegisterType((*GetBlocksResp)(nil), "nodeservice.GetBlocksResp")
}

func init() { proto.RegisterFile("nodeservice/consensus.proto", fileDescriptor_e5bb1eaa9b339447) }

var fileDescriptor_e5bb1eaa9b339447 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0x5b, 0x45, 0x0c, 0x45, 0x2e, 0x0d, 0x31, 0x1b, 0x4c, 0x1a, 0x42, 0x62, 0xc2, 0x69,
	0xd7, 0xe0, 0x0d, 0x6f, 0x60, 0x22, 0x1e, 0xb8, 0xac, 0x9e, 0x8c, 0x97, 0xb2, 0x4c, 0x96, 0x46,
	0xd8, 0x6e, 0x76, 0xba, 0x12, 0xdf, 0xc2, 0xc7, 0xe2, 0xc8, 0xd1, 0xa3, 0xc0, 0x8b, 0x98, 0xb6,
	0x6c, 0xc2, 0xc5, 0xdb, 0xcc, 0x37, 0xf3, 0xcf, 0x74, 0xfe, 0xb2, 0x9b, 0x4c, 0xcf, 0x01, 0xa1,
	0xf8, 0x54, 0x09, 0x44, 0x89, 0xce, 0x10, 0x32, 0x2c, 0x31, 0xcc, 0x0b, 0x6d, 0x34, 0x6f, 0x9e,
	0x14, 0x3b, 0xed, 0x54, 0xa7, 0xda, 0xf1, 0xc8, 0x46, 0xbe, 0xa5, 0xd3, 0x4e, 0xf4, 0x6a, 0xa5,
	0xb3, 0x68, 0x05, 0x88, 0x32, 0x85, 0x23, 0xe5, 0x47, 0x3a, 0x5b, 0xea, 0xe4, 0xc3, 0xb3, 0xde,
	0x90, 0xb1, 0x69, 0xb9, 0x34, 0x6a, 0xbc, 0x90, 0x2a, 0xe3, 0x01, 0xbb, 0x4c, 0x6c, 0xf0, 0xfc,
	0x18, 0xd0, 0x2e, 0xed, 0x37, 0xe2, 0x2a, 0xe5, 0x9c, 0xd5, 0xe6, 0xd2, 0xc8, 0xe0, 0xbc, 0x4b,
	0xfb, 0x57, 0xb1, 0x8b, 0x7b, 0x39, 0x6b, 0x3d, 0x81, 0x19, 0xd9, 0x69, 0x18, 0x03, 0xe6, 0xfc,
	0x8e, 0xd5, 0xd1, 0x48, 0x53, 0xa2, 0x53, 0x37, 0x07, 0xd7, 0xa1, 0xdf, 0x18, 0xbe, 0x38, 0x6a,
	0x7b, 0xec, 0x2d, 0x13, 0x12, 0x1f, 0xfb, 0xf8, 0x2d, 0xbb, 0x70, 0xaf, 0x09, 0xce, 0x9c, 0xa0,
	0x55, 0x09, 0xdc, 0xd0, 0x09, 0x89, 0x7d, 0x75, 0x54, 0x67, 0xb5, 0xd7, 0xaf, 0x1c, 0x06, 0x13,
	0xd6, 0x18, 0x57, 0x6e, 0xf0, 0x87, 0xd3, 0x84, 0x57, 0xca, 0x58, 0xae, 0xa7, 0xfe, 0xea, 0xce,
	0x3f, 0xeb, 0x7b, 0xa4, 0x4f, 0x47, 0xef, 0x9b, 0x9d, 0x20, 0xdb, 0x9d, 0x20, 0x9b, 0xbd, 0xa0,
	0xdb, 0xbd, 0xa0, 0xbf, 0x7b, 0x41, 0xbf, 0x0f, 0x82, 0x6c, 0x0f, 0x82, 0xfc, 0x1c, 0x04, 0x79,
	0x1b, 0xa6, 0xca, 0x84, 0x8b, 0x52, 0xae, 0x41, 0xd9, 0x39, 0x51, 0xae, 0x15, 0xa2, 0xd5, 0xcb,
	0x22, 0x59, 0x44, 0x6b, 0x05, 0x19, 0x14, 0xce, 0x9d, 0xc8, 0xdb, 0x7f, 0xf2, 0x2b, 0xb3, 0xba,
	0x43, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x36, 0x63, 0x2c, 0xc8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsensusClient interface {
	// RawMessage will be unmarshalled to type 'MultiChain', then data to type 'Cons'
	Consensus(ctx context.Context, opts ...grpc.CallOption) (Consensus_ConsensusClient, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Consensus(ctx context.Context, opts ...grpc.CallOption) (Consensus_ConsensusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consensus_serviceDesc.Streams[0], "/nodeservice.Consensus/Consensus", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusConsensusClient{stream}
	return x, nil
}

type Consensus_ConsensusClient interface {
	Send(*common.RawMessage) error
	CloseAndRecv() (*common.StatusResponse, error)
	grpc.ClientStream
}

type consensusConsensusClient struct {
	grpc.ClientStream
}

func (x *consensusConsensusClient) Send(m *common.RawMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusConsensusClient) CloseAndRecv() (*common.StatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusServer is the server API for Consensus service.
type ConsensusServer interface {
	// RawMessage will be unmarshalled to type 'MultiChain', then data to type 'Cons'
	Consensus(Consensus_ConsensusServer) error
}

// UnimplementedConsensusServer can be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (*UnimplementedConsensusServer) Consensus(srv Consensus_ConsensusServer) error {
	return status.Errorf(codes.Unimplemented, "method Consensus not implemented")
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Consensus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusServer).Consensus(&consensusConsensusServer{stream})
}

type Consensus_ConsensusServer interface {
	SendAndClose(*common.StatusResponse) error
	Recv() (*common.RawMessage, error)
	grpc.ServerStream
}

type consensusConsensusServer struct {
	grpc.ServerStream
}

func (x *consensusConsensusServer) SendAndClose(m *common.StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusConsensusServer) Recv() (*common.RawMessage, error) {
	m := new(common.RawMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeservice.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consensus",
			Handler:       _Consensus_Consensus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "nodeservice/consensus.proto",
}

func (m *MultiChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksResp_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksResp_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GetBlocksResp_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksResp_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintConsensus(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *GetBlocksResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *GetBlocksResp_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}
func (m *GetBlocksResp_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func sovConsensus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensus(x uint64) (n int) {
	return sovConsensus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.StatusResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GetBlocksResp_Status{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common.Block{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GetBlocksResp_Block{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensus = fmt.Errorf("proto: unexpected end of group")
)
