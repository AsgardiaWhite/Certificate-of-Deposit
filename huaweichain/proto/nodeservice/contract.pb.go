// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodeservice/contract.proto

package nodeservice

import (
	context "context"
	fmt "fmt"
	common "git.huawei.com/huaweichain/proto/common"
	contract "git.huawei.com/huaweichain/proto/contract"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractInfoQueryResponse_Status int32

const (
	OK ContractInfoQueryResponse_Status = 0
)

var ContractInfoQueryResponse_Status_name = map[int32]string{
	0: "OK",
}

var ContractInfoQueryResponse_Status_value = map[string]int32{
	"OK": 0,
}

func (x ContractInfoQueryResponse_Status) String() string {
	return proto.EnumName(ContractInfoQueryResponse_Status_name, int32(x))
}

func (ContractInfoQueryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23ae2970887da9ed, []int{2, 0}
}

// The invoke request from client
type Invocation struct {
	Header     *common.TxHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Parameters *common.ContractInvocation `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *Invocation) Reset()         { *m = Invocation{} }
func (m *Invocation) String() string { return proto.CompactTextString(m) }
func (*Invocation) ProtoMessage()    {}
func (*Invocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ae2970887da9ed, []int{0}
}
func (m *Invocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invocation.Merge(m, src)
}
func (m *Invocation) XXX_Size() int {
	return m.Size()
}
func (m *Invocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Invocation.DiscardUnknown(m)
}

var xxx_messageInfo_Invocation proto.InternalMessageInfo

type ContractInfo struct {
	ChainId      string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*ContractInfo_ExternalContractInfo
	Type isContractInfo_Type `protobuf_oneof:"type"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ae2970887da9ed, []int{1}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

type isContractInfo_Type interface {
	isContractInfo_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ContractInfo_ExternalContractInfo struct {
	ExternalContractInfo *contract.ExternalContractInfo `protobuf:"bytes,11,opt,name=external_contract_info,json=externalContractInfo,proto3,oneof" json:"external_contract_info,omitempty"`
}

func (*ContractInfo_ExternalContractInfo) isContractInfo_Type() {}

func (m *ContractInfo) GetType() isContractInfo_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ContractInfo) GetExternalContractInfo() *contract.ExternalContractInfo {
	if x, ok := m.GetType().(*ContractInfo_ExternalContractInfo); ok {
		return x.ExternalContractInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContractInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContractInfo_ExternalContractInfo)(nil),
	}
}

type ContractInfoQueryResponse struct {
	ID         string                           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version    string                           `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Definition *contract.ContractDefinition     `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	Image      *contract.DockerImageInfo        `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Status     ContractInfoQueryResponse_Status `protobuf:"varint,6,opt,name=status,proto3,enum=nodeservice.ContractInfoQueryResponse_Status" json:"status,omitempty"`
}

func (m *ContractInfoQueryResponse) Reset()         { *m = ContractInfoQueryResponse{} }
func (m *ContractInfoQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ContractInfoQueryResponse) ProtoMessage()    {}
func (*ContractInfoQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ae2970887da9ed, []int{2}
}
func (m *ContractInfoQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfoQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfoQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfoQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfoQueryResponse.Merge(m, src)
}
func (m *ContractInfoQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfoQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfoQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfoQueryResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nodeservice.ContractInfoQueryResponse_Status", ContractInfoQueryResponse_Status_name, ContractInfoQueryResponse_Status_value)
	proto.RegisterType((*Invocation)(nil), "nodeservice.Invocation")
	proto.RegisterType((*ContractInfo)(nil), "nodeservice.ContractInfo")
	proto.RegisterType((*ContractInfoQueryResponse)(nil), "nodeservice.ContractInfoQueryResponse")
}

func init() { proto.RegisterFile("nodeservice/contract.proto", fileDescriptor_23ae2970887da9ed) }

var fileDescriptor_23ae2970887da9ed = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xb5, 0xd3, 0xd6, 0x6d, 0x6f, 0x43, 0x55, 0x8d, 0x2a, 0x70, 0x23, 0x64, 0x55, 0x61, 0x93,
	0x0d, 0x36, 0x04, 0x84, 0x50, 0xd5, 0x55, 0x49, 0x45, 0xa3, 0x8a, 0x97, 0x5b, 0x58, 0xb0, 0x89,
	0xa6, 0xce, 0x4d, 0x32, 0x2a, 0x9e, 0xb1, 0x66, 0x26, 0x49, 0xfb, 0x03, 0x6c, 0xd8, 0xf0, 0x0b,
	0xfc, 0x00, 0xdf, 0xd1, 0x65, 0x96, 0x2c, 0x69, 0xf2, 0x23, 0xc8, 0x63, 0x3b, 0xb1, 0x50, 0x91,
	0xc8, 0x6e, 0xe6, 0xdc, 0x73, 0xe6, 0x9c, 0x3b, 0xbe, 0x1e, 0xa8, 0x71, 0xd1, 0x45, 0x85, 0x72,
	0xc4, 0x22, 0x0c, 0x22, 0xc1, 0xb5, 0xa4, 0x91, 0xf6, 0x13, 0x29, 0xb4, 0x20, 0x5b, 0xa5, 0x5a,
	0x6d, 0xb7, 0x2f, 0xfa, 0xc2, 0xe0, 0x41, 0xba, 0xca, 0x28, 0xb5, 0xdd, 0x48, 0xc4, 0xb1, 0xe0,
	0x41, 0x8c, 0x4a, 0xd1, 0x3e, 0xe6, 0xa8, 0x9b, 0xa3, 0x5a, 0x52, 0xae, 0x68, 0xa4, 0x99, 0xe0,
	0x79, 0xe5, 0x41, 0x61, 0xf1, 0x97, 0x57, 0x5d, 0x02, 0xb4, 0xf9, 0x48, 0x44, 0x34, 0x25, 0x93,
	0x06, 0x38, 0x03, 0xa4, 0x5d, 0x94, 0xae, 0xbd, 0x6f, 0x37, 0xb6, 0x9a, 0x3b, 0x7e, 0x76, 0xa2,
	0x7f, 0x7e, 0x75, 0x62, 0xf0, 0x30, 0xaf, 0x93, 0x03, 0x80, 0x84, 0x4a, 0x1a, 0xa3, 0x46, 0xa9,
	0xdc, 0x8a, 0x61, 0xd7, 0x0a, 0xf6, 0xab, 0xdc, 0x63, 0x71, 0x72, 0x58, 0x62, 0xd7, 0x7f, 0xda,
	0x50, 0x5d, 0x50, 0x7a, 0x82, 0xec, 0xc1, 0x46, 0x34, 0xa0, 0x8c, 0x77, 0x58, 0xd7, 0x18, 0x6f,
	0x86, 0xeb, 0x66, 0xdf, 0xee, 0x92, 0x47, 0x70, 0xaf, 0x48, 0xdc, 0xe1, 0x34, 0x46, 0x63, 0xb5,
	0x19, 0x56, 0x0b, 0xf0, 0x2d, 0x8d, 0x91, 0x7c, 0x82, 0xfb, 0x78, 0xa5, 0x51, 0x72, 0xfa, 0xa5,
	0x33, 0x67, 0x33, 0xde, 0x13, 0xee, 0x96, 0x09, 0xe6, 0xf9, 0xf3, 0xae, 0x8f, 0x73, 0x5e, 0xd9,
	0xff, 0xc4, 0x0a, 0x77, 0xf1, 0x0e, 0xfc, 0xc8, 0x81, 0x55, 0x7d, 0x9d, 0x60, 0xfd, 0x47, 0x05,
	0xf6, 0xca, 0x85, 0x0f, 0x43, 0x94, 0xd7, 0x21, 0xaa, 0x44, 0x70, 0x85, 0x64, 0x1b, 0x2a, 0xed,
	0x56, 0x9e, 0xbb, 0xd2, 0x6e, 0x11, 0x02, 0xab, 0xa5, 0xa4, 0x66, 0x4d, 0x5c, 0x58, 0x1f, 0xa1,
	0x54, 0x4c, 0x70, 0x77, 0x25, 0x6b, 0x30, 0xdf, 0x92, 0x43, 0x80, 0x2e, 0xf6, 0x18, 0x67, 0xe9,
	0x35, 0xb9, 0xab, 0x26, 0xef, 0xc3, 0x45, 0xde, 0xc2, 0xb6, 0x35, 0xe7, 0x84, 0x25, 0x3e, 0x09,
	0x60, 0x8d, 0xc5, 0xb4, 0x8f, 0xee, 0x9a, 0x11, 0xee, 0x2d, 0x84, 0x2d, 0x11, 0x5d, 0xa2, 0x6c,
	0xa7, 0xc5, 0x34, 0x72, 0x98, 0xf1, 0xc8, 0x31, 0x38, 0x4a, 0x53, 0x3d, 0x54, 0xae, 0xb3, 0x6f,
	0x37, 0xb6, 0x9b, 0x8f, 0xfd, 0xd2, 0xb0, 0xf9, 0xff, 0x6c, 0xd2, 0x3f, 0x33, 0xa2, 0x30, 0x17,
	0xd7, 0x77, 0xc0, 0xc9, 0x10, 0xe2, 0x40, 0xe5, 0xdd, 0xe9, 0x8e, 0xd5, 0xfc, 0xb6, 0x02, 0x1b,
	0x85, 0x9c, 0x34, 0xc1, 0x49, 0xbf, 0xfd, 0x25, 0x12, 0x52, 0xcc, 0x44, 0x48, 0xc7, 0x6f, 0xb2,
	0x61, 0xad, 0xdd, 0x81, 0xd5, 0x2d, 0xf2, 0x14, 0xd6, 0x8c, 0xe5, 0x12, 0x92, 0xd4, 0x26, 0x4e,
	0x84, 0xd4, 0x4b, 0x68, 0x9e, 0xc3, 0xc6, 0x47, 0xbe, 0xb4, 0xea, 0x05, 0x80, 0x09, 0x97, 0x36,
	0xbd, 0x4c, 0x53, 0x87, 0x50, 0xcd, 0x2e, 0xe2, 0x4c, 0x4b, 0xa4, 0xf1, 0xff, 0x2b, 0x1b, 0xf6,
	0x13, 0x9b, 0xbc, 0x84, 0xea, 0x6b, 0xd4, 0xe7, 0x88, 0xef, 0x87, 0x17, 0xa7, 0xb8, 0xc4, 0xcd,
	0x1c, 0x7d, 0xb5, 0x6f, 0x6e, 0x3d, 0x6b, 0x72, 0xeb, 0x59, 0x37, 0x53, 0xcf, 0x9e, 0x4c, 0x3d,
	0xfb, 0xf7, 0xd4, 0xb3, 0xbf, 0xcf, 0x3c, 0x6b, 0x32, 0xf3, 0xac, 0x5f, 0x33, 0xcf, 0x82, 0x46,
	0x24, 0x62, 0x7f, 0x30, 0xa4, 0x63, 0x64, 0xfe, 0x98, 0x21, 0x47, 0x69, 0xfe, 0xb9, 0xec, 0x5d,
	0x28, 0x4f, 0xc5, 0xe7, 0x83, 0x3e, 0xd3, 0x05, 0x33, 0x12, 0x71, 0x90, 0x08, 0xa6, 0x54, 0x3a,
	0x15, 0x54, 0x46, 0x83, 0xa0, 0xa4, 0x0d, 0xb2, 0x77, 0xaa, 0xa4, 0xbd, 0x70, 0x0c, 0xf4, 0xec,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x3c, 0xa7, 0x18, 0xf0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContractClient is the client API for Contract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContractClient interface {
	// send preparation to contract for executing.
	// The payload of RawMessage in request is Preparation in common.transaction.proto.
	// The payload in return is Response in message.proto and the payload in Response
	// is common.Transaction.
	Invoke(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	Query(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	Import(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	UnImport(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	QueryState(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
	InvokeStream(ctx context.Context, opts ...grpc.CallOption) (Contract_InvokeStreamClient, error)
	// inputs: ContractInfo{chain_id, contract_name, schema_version}
	// response: public key bytes
	GetTeePubKey(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error)
}

type contractClient struct {
	cc *grpc.ClientConn
}

func NewContractClient(cc *grpc.ClientConn) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Invoke(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Query(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Import(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) UnImport(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/UnImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) QueryState(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/QueryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) InvokeStream(ctx context.Context, opts ...grpc.CallOption) (Contract_InvokeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Contract_serviceDesc.Streams[0], "/nodeservice.Contract/InvokeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractInvokeStreamClient{stream}
	return x, nil
}

type Contract_InvokeStreamClient interface {
	Send(*common.RawMessage) error
	Recv() (*common.RawMessage, error)
	grpc.ClientStream
}

type contractInvokeStreamClient struct {
	grpc.ClientStream
}

func (x *contractInvokeStreamClient) Send(m *common.RawMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contractInvokeStreamClient) Recv() (*common.RawMessage, error) {
	m := new(common.RawMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contractClient) GetTeePubKey(ctx context.Context, in *common.RawMessage, opts ...grpc.CallOption) (*common.RawMessage, error) {
	out := new(common.RawMessage)
	err := c.cc.Invoke(ctx, "/nodeservice.Contract/GetTeePubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServer is the server API for Contract service.
type ContractServer interface {
	// send preparation to contract for executing.
	// The payload of RawMessage in request is Preparation in common.transaction.proto.
	// The payload in return is Response in message.proto and the payload in Response
	// is common.Transaction.
	Invoke(context.Context, *common.RawMessage) (*common.RawMessage, error)
	Query(context.Context, *common.RawMessage) (*common.RawMessage, error)
	Import(context.Context, *common.RawMessage) (*common.RawMessage, error)
	UnImport(context.Context, *common.RawMessage) (*common.RawMessage, error)
	QueryState(context.Context, *common.RawMessage) (*common.RawMessage, error)
	InvokeStream(Contract_InvokeStreamServer) error
	// inputs: ContractInfo{chain_id, contract_name, schema_version}
	// response: public key bytes
	GetTeePubKey(context.Context, *common.RawMessage) (*common.RawMessage, error)
}

// UnimplementedContractServer can be embedded to have forward compatible implementations.
type UnimplementedContractServer struct {
}

func (*UnimplementedContractServer) Invoke(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (*UnimplementedContractServer) Query(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedContractServer) Import(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedContractServer) UnImport(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnImport not implemented")
}
func (*UnimplementedContractServer) QueryState(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}
func (*UnimplementedContractServer) InvokeStream(srv Contract_InvokeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InvokeStream not implemented")
}
func (*UnimplementedContractServer) GetTeePubKey(ctx context.Context, req *common.RawMessage) (*common.RawMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeePubKey not implemented")
}

func RegisterContractServer(s *grpc.Server, srv ContractServer) {
	s.RegisterService(&_Contract_serviceDesc, srv)
}

func _Contract_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Invoke(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Query(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Import(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_UnImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).UnImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/UnImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).UnImport(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/QueryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).QueryState(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_InvokeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContractServer).InvokeStream(&contractInvokeStreamServer{stream})
}

type Contract_InvokeStreamServer interface {
	Send(*common.RawMessage) error
	Recv() (*common.RawMessage, error)
	grpc.ServerStream
}

type contractInvokeStreamServer struct {
	grpc.ServerStream
}

func (x *contractInvokeStreamServer) Send(m *common.RawMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contractInvokeStreamServer) Recv() (*common.RawMessage, error) {
	m := new(common.RawMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Contract_GetTeePubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RawMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).GetTeePubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservice.Contract/GetTeePubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).GetTeePubKey(ctx, req.(*common.RawMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeservice.Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Contract_Invoke_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Contract_Query_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _Contract_Import_Handler,
		},
		{
			MethodName: "UnImport",
			Handler:    _Contract_UnImport_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _Contract_QueryState_Handler,
		},
		{
			MethodName: "GetTeePubKey",
			Handler:    _Contract_GetTeePubKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InvokeStream",
			Handler:       _Contract_InvokeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nodeservice/contract.proto",
}

func (m *Invocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractInfo_ExternalContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo_ExternalContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalContractInfo != nil {
		{
			size, err := m.ExternalContractInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ContractInfoQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfoQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfoQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Definition != nil {
		{
			size, err := m.Definition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Invocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *ContractInfo_ExternalContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalContractInfo != nil {
		l = m.ExternalContractInfo.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}
func (m *ContractInfoQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Definition != nil {
		l = m.Definition.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovContract(uint64(m.Status))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Invocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &common.TxHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &common.ContractInvocation{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalContractInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &contract.ExternalContractInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ContractInfo_ExternalContractInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfoQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfoQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfoQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Definition == nil {
				m.Definition = &contract.ContractDefinition{}
			}
			if err := m.Definition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &contract.DockerImageInfo{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ContractInfoQueryResponse_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
