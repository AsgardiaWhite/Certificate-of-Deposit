// Code generated by MockGen. DO NOT EDIT.
// Source: /opt/liuqi/wienerchain/common/cryptomgr/cryptointerface.go

// Package cryptomgr is a generated GoMock package.
package cryptomgr

import (
	x509 "crypto/x509"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// GetPemBytes mocks base method.
func (m *MockKey) GetPemBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPemBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPemBytes indicates an expected call of GetPemBytes.
func (mr *MockKeyMockRecorder) GetPemBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPemBytes", reflect.TypeOf((*MockKey)(nil).GetPemBytes))
}

// IsSymmetric mocks base method.
func (m *MockKey) IsSymmetric() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSymmetric")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSymmetric indicates an expected call of IsSymmetric.
func (mr *MockKeyMockRecorder) IsSymmetric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSymmetric", reflect.TypeOf((*MockKey)(nil).IsSymmetric))
}

// IsPrivate mocks base method.
func (m *MockKey) IsPrivate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrivate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPrivate indicates an expected call of IsPrivate.
func (mr *MockKeyMockRecorder) IsPrivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrivate", reflect.TypeOf((*MockKey)(nil).IsPrivate))
}

// GetPublicKey mocks base method.
func (m *MockKey) GetPublicKey() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockKeyMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockKey)(nil).GetPublicKey))
}

// GetPrivateKey mocks base method.
func (m *MockKey) GetPrivateKey() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockKeyMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockKey)(nil).GetPrivateKey))
}

// Sign mocks base method.
func (m *MockKey) Sign(msg []byte, hashAlg string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hashAlg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockKeyMockRecorder) Sign(msg, hashAlg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockKey)(nil).Sign), msg, hashAlg)
}

// Verify mocks base method.
func (m *MockKey) Verify(msg, signature []byte, hashAlg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, signature, hashAlg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockKeyMockRecorder) Verify(msg, signature, hashAlg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockKey)(nil).Verify), msg, signature, hashAlg)
}

// MockSign is a mock of Sign interface.
type MockSign struct {
	ctrl     *gomock.Controller
	recorder *MockSignMockRecorder
}

// MockSignMockRecorder is the mock recorder for MockSign.
type MockSignMockRecorder struct {
	mock *MockSign
}

// NewMockSign creates a new mock instance.
func NewMockSign(ctrl *gomock.Controller) *MockSign {
	mock := &MockSign{ctrl: ctrl}
	mock.recorder = &MockSignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSign) EXPECT() *MockSignMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSign) Sign(msg []byte, hashAlg string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg, hashAlg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignMockRecorder) Sign(msg, hashAlg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSign)(nil).Sign), msg, hashAlg)
}

// MockVerify is a mock of Verify interface.
type MockVerify struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyMockRecorder
}

// MockVerifyMockRecorder is the mock recorder for MockVerify.
type MockVerifyMockRecorder struct {
	mock *MockVerify
}

// NewMockVerify creates a new mock instance.
func NewMockVerify(ctrl *gomock.Controller) *MockVerify {
	mock := &MockVerify{ctrl: ctrl}
	mock.recorder = &MockVerifyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerify) EXPECT() *MockVerifyMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockVerify) Verify(msg, signature []byte, hashAlg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, signature, hashAlg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockVerifyMockRecorder) Verify(msg, signature, hashAlg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerify)(nil).Verify), msg, signature, hashAlg)
}

// MockEncrypt is a mock of Encrypt interface.
type MockEncrypt struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptMockRecorder
}

// MockEncryptMockRecorder is the mock recorder for MockEncrypt.
type MockEncryptMockRecorder struct {
	mock *MockEncrypt
}

// NewMockEncrypt creates a new mock instance.
func NewMockEncrypt(ctrl *gomock.Controller) *MockEncrypt {
	mock := &MockEncrypt{ctrl: ctrl}
	mock.recorder = &MockEncryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypt) EXPECT() *MockEncryptMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncrypt) Encrypt(plainText []byte) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plainText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptMockRecorder) Encrypt(plainText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypt)(nil).Encrypt), plainText)
}

// MockDecrypt is a mock of Decrypt interface.
type MockDecrypt struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptMockRecorder
}

// MockDecryptMockRecorder is the mock recorder for MockDecrypt.
type MockDecryptMockRecorder struct {
	mock *MockDecrypt
}

// NewMockDecrypt creates a new mock instance.
func NewMockDecrypt(ctrl *gomock.Controller) *MockDecrypt {
	mock := &MockDecrypt{ctrl: ctrl}
	mock.recorder = &MockDecryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecrypt) EXPECT() *MockDecryptMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecrypt) Decrypt(cipherText, nonce string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipherText, nonce)
	ret0, _ := ret[0].(string)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecryptMockRecorder) Decrypt(cipherText, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecrypt)(nil).Decrypt), cipherText, nonce)
}

// MockCert is a mock of Cert interface.
type MockCert struct {
	ctrl     *gomock.Controller
	recorder *MockCertMockRecorder
}

// MockCertMockRecorder is the mock recorder for MockCert.
type MockCertMockRecorder struct {
	mock *MockCert
}

// NewMockCert creates a new mock instance.
func NewMockCert(ctrl *gomock.Controller) *MockCert {
	mock := &MockCert{ctrl: ctrl}
	mock.recorder = &MockCertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCert) EXPECT() *MockCertMockRecorder {
	return m.recorder
}

// GetCommonName mocks base method.
func (m *MockCert) GetCommonName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCommonName indicates an expected call of GetCommonName.
func (mr *MockCertMockRecorder) GetCommonName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonName", reflect.TypeOf((*MockCert)(nil).GetCommonName))
}

// GetExpireTime mocks base method.
func (m *MockCert) GetExpireTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpireTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetExpireTime indicates an expected call of GetExpireTime.
func (mr *MockCertMockRecorder) GetExpireTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpireTime", reflect.TypeOf((*MockCert)(nil).GetExpireTime))
}

// GetOrganizationalUnit mocks base method.
func (m *MockCert) GetOrganizationalUnit() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationalUnit")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOrganizationalUnit indicates an expected call of GetOrganizationalUnit.
func (mr *MockCertMockRecorder) GetOrganizationalUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationalUnit", reflect.TypeOf((*MockCert)(nil).GetOrganizationalUnit))
}

// GetOrganization mocks base method.
func (m *MockCert) GetOrganization() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockCertMockRecorder) GetOrganization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockCert)(nil).GetOrganization))
}

// Verify mocks base method.
func (m *MockCert) Verify(msg, signature []byte, hashOpt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, signature, hashOpt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCertMockRecorder) Verify(msg, signature, hashOpt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCert)(nil).Verify), msg, signature, hashOpt)
}

// CheckValidation mocks base method.
func (m *MockCert) CheckValidation(rootcerts []Cert) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckValidation", rootcerts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckValidation indicates an expected call of CheckValidation.
func (mr *MockCertMockRecorder) CheckValidation(rootcerts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidation", reflect.TypeOf((*MockCert)(nil).CheckValidation), rootcerts)
}

// GetPemCertBytes mocks base method.
func (m *MockCert) GetPemCertBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPemCertBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPemCertBytes indicates an expected call of GetPemCertBytes.
func (mr *MockCertMockRecorder) GetPemCertBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPemCertBytes", reflect.TypeOf((*MockCert)(nil).GetPemCertBytes))
}

// GetX509Cert mocks base method.
func (m *MockCert) GetX509Cert() *x509.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetX509Cert")
	ret0, _ := ret[0].(*x509.Certificate)
	return ret0
}

// GetX509Cert indicates an expected call of GetX509Cert.
func (mr *MockCertMockRecorder) GetX509Cert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetX509Cert", reflect.TypeOf((*MockCert)(nil).GetX509Cert))
}

// GetFingerPrint mocks base method.
func (m *MockCert) GetFingerPrint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFingerPrint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (m *MockCert) GetSerialNumber() string {
	return ""
}

// GetFingerPrint indicates an expected call of GetFingerPrint.
func (mr *MockCertMockRecorder) GetFingerPrint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFingerPrint", reflect.TypeOf((*MockCert)(nil).GetFingerPrint))
}

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockIdentity) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockIdentityMockRecorder) Sign(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockIdentity)(nil).Sign), msg)
}

// GetLocalCert mocks base method.
func (m *MockIdentity) GetLocalCert() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalCert")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetLocalCert indicates an expected call of GetLocalCert.
func (mr *MockIdentityMockRecorder) GetLocalCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalCert", reflect.TypeOf((*MockIdentity)(nil).GetLocalCert))
}

// Verify mocks base method.
func (m *MockIdentity) Verify(msg, sig, cert []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, sig, cert)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIdentityMockRecorder) Verify(msg, sig, cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIdentity)(nil).Verify), msg, sig, cert)
}

// Validate mocks base method.
func (m *MockIdentity) Validate(cert []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", cert)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockIdentityMockRecorder) Validate(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIdentity)(nil).Validate), cert)
}

// IsAdmin mocks base method.
func (m *MockIdentity) IsAdmin(cert []byte) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", cert)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockIdentityMockRecorder) IsAdmin(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockIdentity)(nil).IsAdmin), cert)
}

// CheckLocalCertSignature mocks base method.
func (m *MockIdentity) CheckLocalCertSignature(rootCert []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLocalCertSignature", rootCert)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckLocalCertSignature indicates an expected call of CheckLocalCertSignature.
func (mr *MockIdentityMockRecorder) CheckLocalCertSignature(rootCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLocalCertSignature", reflect.TypeOf((*MockIdentity)(nil).CheckLocalCertSignature), rootCert)
}

// MockChainCrypto is a mock of ChainCrypto interface.
type MockChainCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockChainCryptoMockRecorder
}

// MockChainCryptoMockRecorder is the mock recorder for MockChainCrypto.
type MockChainCryptoMockRecorder struct {
	mock *MockChainCrypto
}

// NewMockChainCrypto creates a new mock instance.
func NewMockChainCrypto(ctrl *gomock.Controller) *MockChainCrypto {
	mock := &MockChainCrypto{ctrl: ctrl}
	mock.recorder = &MockChainCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainCrypto) EXPECT() *MockChainCryptoMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockChainCrypto) Verify(msg, sig, pemCert []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", msg, sig, pemCert)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockChainCryptoMockRecorder) Verify(msg, sig, pemCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockChainCrypto)(nil).Verify), msg, sig, pemCert)
}

// Validate mocks base method.
func (m *MockChainCrypto) Validate(pemCert []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", pemCert)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockChainCryptoMockRecorder) Validate(pemCert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockChainCrypto)(nil).Validate), pemCert)
}

// IsAdmin mocks base method.
func (m *MockChainCrypto) IsAdmin(cert []byte) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", cert)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockChainCryptoMockRecorder) IsAdmin(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockChainCrypto)(nil).IsAdmin), cert)
}
